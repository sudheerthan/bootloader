
bootloader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00030100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00001b74  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .mysection    00000024  08018000  08018000  00028000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000038  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08002bb8  08002bb8  00030180  2**0
                  CONTENTS
  7 .ARM          00000000  08002bb8  08002bb8  00030180  2**0
                  CONTENTS
  8 .preinit_array 00000000  08002bb8  08002bb8  00030180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000010  20000180  08002bc0  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000000a8  20000190  08002bd0  00020190  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20000238  08002bd0  00020238  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY
 15 .debug_info   00007266  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001139  00000000  00000000  0003740e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000590  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000528  00000000  00000000  00038ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000f228  00000000  00000000  00039000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000071ec  00000000  00000000  00048228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0005ca21  00000000  00000000  0004f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  000abe35  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000012a4  00000000  00000000  000abe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	; (8001028 <__do_global_dtors_aux+0x1c>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <__do_global_dtors_aux+0x1a>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <__do_global_dtors_aux+0x20>)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <__do_global_dtors_aux+0x16>
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <__do_global_dtors_aux+0x24>)
 800101e:	e000      	b.n	8001022 <__do_global_dtors_aux+0x16>
 8001020:	bf00      	nop
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	20000190 	.word	0x20000190
 800102c:	00000000 	.word	0x00000000
 8001030:	08002b68 	.word	0x08002b68

08001034 <frame_dummy>:
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <frame_dummy+0x14>)
 8001036:	b510      	push	{r4, lr}
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <frame_dummy+0x10>
 800103c:	4903      	ldr	r1, [pc, #12]	; (800104c <frame_dummy+0x18>)
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <frame_dummy+0x1c>)
 8001040:	e000      	b.n	8001044 <frame_dummy+0x10>
 8001042:	bf00      	nop
 8001044:	bd10      	pop	{r4, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	00000000 	.word	0x00000000
 800104c:	20000194 	.word	0x20000194
 8001050:	08002b68 	.word	0x08002b68

08001054 <__udivsi3>:
 8001054:	2200      	movs	r2, #0
 8001056:	0843      	lsrs	r3, r0, #1
 8001058:	428b      	cmp	r3, r1
 800105a:	d374      	bcc.n	8001146 <__udivsi3+0xf2>
 800105c:	0903      	lsrs	r3, r0, #4
 800105e:	428b      	cmp	r3, r1
 8001060:	d35f      	bcc.n	8001122 <__udivsi3+0xce>
 8001062:	0a03      	lsrs	r3, r0, #8
 8001064:	428b      	cmp	r3, r1
 8001066:	d344      	bcc.n	80010f2 <__udivsi3+0x9e>
 8001068:	0b03      	lsrs	r3, r0, #12
 800106a:	428b      	cmp	r3, r1
 800106c:	d328      	bcc.n	80010c0 <__udivsi3+0x6c>
 800106e:	0c03      	lsrs	r3, r0, #16
 8001070:	428b      	cmp	r3, r1
 8001072:	d30d      	bcc.n	8001090 <__udivsi3+0x3c>
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	ba12      	rev	r2, r2
 800107a:	0c03      	lsrs	r3, r0, #16
 800107c:	428b      	cmp	r3, r1
 800107e:	d302      	bcc.n	8001086 <__udivsi3+0x32>
 8001080:	1212      	asrs	r2, r2, #8
 8001082:	0209      	lsls	r1, r1, #8
 8001084:	d065      	beq.n	8001152 <__udivsi3+0xfe>
 8001086:	0b03      	lsrs	r3, r0, #12
 8001088:	428b      	cmp	r3, r1
 800108a:	d319      	bcc.n	80010c0 <__udivsi3+0x6c>
 800108c:	e000      	b.n	8001090 <__udivsi3+0x3c>
 800108e:	0a09      	lsrs	r1, r1, #8
 8001090:	0bc3      	lsrs	r3, r0, #15
 8001092:	428b      	cmp	r3, r1
 8001094:	d301      	bcc.n	800109a <__udivsi3+0x46>
 8001096:	03cb      	lsls	r3, r1, #15
 8001098:	1ac0      	subs	r0, r0, r3
 800109a:	4152      	adcs	r2, r2
 800109c:	0b83      	lsrs	r3, r0, #14
 800109e:	428b      	cmp	r3, r1
 80010a0:	d301      	bcc.n	80010a6 <__udivsi3+0x52>
 80010a2:	038b      	lsls	r3, r1, #14
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	4152      	adcs	r2, r2
 80010a8:	0b43      	lsrs	r3, r0, #13
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d301      	bcc.n	80010b2 <__udivsi3+0x5e>
 80010ae:	034b      	lsls	r3, r1, #13
 80010b0:	1ac0      	subs	r0, r0, r3
 80010b2:	4152      	adcs	r2, r2
 80010b4:	0b03      	lsrs	r3, r0, #12
 80010b6:	428b      	cmp	r3, r1
 80010b8:	d301      	bcc.n	80010be <__udivsi3+0x6a>
 80010ba:	030b      	lsls	r3, r1, #12
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	4152      	adcs	r2, r2
 80010c0:	0ac3      	lsrs	r3, r0, #11
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d301      	bcc.n	80010ca <__udivsi3+0x76>
 80010c6:	02cb      	lsls	r3, r1, #11
 80010c8:	1ac0      	subs	r0, r0, r3
 80010ca:	4152      	adcs	r2, r2
 80010cc:	0a83      	lsrs	r3, r0, #10
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d301      	bcc.n	80010d6 <__udivsi3+0x82>
 80010d2:	028b      	lsls	r3, r1, #10
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	4152      	adcs	r2, r2
 80010d8:	0a43      	lsrs	r3, r0, #9
 80010da:	428b      	cmp	r3, r1
 80010dc:	d301      	bcc.n	80010e2 <__udivsi3+0x8e>
 80010de:	024b      	lsls	r3, r1, #9
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	4152      	adcs	r2, r2
 80010e4:	0a03      	lsrs	r3, r0, #8
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d301      	bcc.n	80010ee <__udivsi3+0x9a>
 80010ea:	020b      	lsls	r3, r1, #8
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	4152      	adcs	r2, r2
 80010f0:	d2cd      	bcs.n	800108e <__udivsi3+0x3a>
 80010f2:	09c3      	lsrs	r3, r0, #7
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d301      	bcc.n	80010fc <__udivsi3+0xa8>
 80010f8:	01cb      	lsls	r3, r1, #7
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	4152      	adcs	r2, r2
 80010fe:	0983      	lsrs	r3, r0, #6
 8001100:	428b      	cmp	r3, r1
 8001102:	d301      	bcc.n	8001108 <__udivsi3+0xb4>
 8001104:	018b      	lsls	r3, r1, #6
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4152      	adcs	r2, r2
 800110a:	0943      	lsrs	r3, r0, #5
 800110c:	428b      	cmp	r3, r1
 800110e:	d301      	bcc.n	8001114 <__udivsi3+0xc0>
 8001110:	014b      	lsls	r3, r1, #5
 8001112:	1ac0      	subs	r0, r0, r3
 8001114:	4152      	adcs	r2, r2
 8001116:	0903      	lsrs	r3, r0, #4
 8001118:	428b      	cmp	r3, r1
 800111a:	d301      	bcc.n	8001120 <__udivsi3+0xcc>
 800111c:	010b      	lsls	r3, r1, #4
 800111e:	1ac0      	subs	r0, r0, r3
 8001120:	4152      	adcs	r2, r2
 8001122:	08c3      	lsrs	r3, r0, #3
 8001124:	428b      	cmp	r3, r1
 8001126:	d301      	bcc.n	800112c <__udivsi3+0xd8>
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	4152      	adcs	r2, r2
 800112e:	0883      	lsrs	r3, r0, #2
 8001130:	428b      	cmp	r3, r1
 8001132:	d301      	bcc.n	8001138 <__udivsi3+0xe4>
 8001134:	008b      	lsls	r3, r1, #2
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	4152      	adcs	r2, r2
 800113a:	0843      	lsrs	r3, r0, #1
 800113c:	428b      	cmp	r3, r1
 800113e:	d301      	bcc.n	8001144 <__udivsi3+0xf0>
 8001140:	004b      	lsls	r3, r1, #1
 8001142:	1ac0      	subs	r0, r0, r3
 8001144:	4152      	adcs	r2, r2
 8001146:	1a41      	subs	r1, r0, r1
 8001148:	d200      	bcs.n	800114c <__udivsi3+0xf8>
 800114a:	4601      	mov	r1, r0
 800114c:	4152      	adcs	r2, r2
 800114e:	4610      	mov	r0, r2
 8001150:	4770      	bx	lr
 8001152:	e7ff      	b.n	8001154 <__udivsi3+0x100>
 8001154:	b501      	push	{r0, lr}
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f806 	bl	8001168 <__aeabi_idiv0>
 800115c:	bd02      	pop	{r1, pc}
 800115e:	46c0      	nop			; (mov r8, r8)

08001160 <__aeabi_uidivmod>:
 8001160:	2900      	cmp	r1, #0
 8001162:	d0f7      	beq.n	8001154 <__udivsi3+0x100>
 8001164:	e776      	b.n	8001054 <__udivsi3>
 8001166:	4770      	bx	lr

08001168 <__aeabi_idiv0>:
 8001168:	4770      	bx	lr
 800116a:	46c0      	nop			; (mov r8, r8)

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f000 f9b0 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f80c 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f000 f886 	bl	8001288 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800117c:	f000 f854 	bl	8001228 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // Blink(100);
	  //TurnOnLED(GPIO_PIN_SET);
	  (*Functions[0])(100);
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <main+0x20>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	4798      	blx	r3
 8001188:	e7fa      	b.n	8001180 <main+0x14>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000180 	.word	0x20000180

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b091      	sub	sp, #68	; 0x44
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	2410      	movs	r4, #16
 8001198:	193b      	adds	r3, r7, r4
 800119a:	0018      	movs	r0, r3
 800119c:	2330      	movs	r3, #48	; 0x30
 800119e:	001a      	movs	r2, r3
 80011a0:	2100      	movs	r1, #0
 80011a2:	f001 fcd9 	bl	8002b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a6:	003b      	movs	r3, r7
 80011a8:	0018      	movs	r0, r3
 80011aa:	2310      	movs	r3, #16
 80011ac:	001a      	movs	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f001 fcd2 	bl	8002b58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b4:	0021      	movs	r1, r4
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2202      	movs	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2201      	movs	r2, #1
 80011c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2210      	movs	r2, #16
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2202      	movs	r2, #2
 80011cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0212      	lsls	r2, r2, #8
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	0352      	lsls	r2, r2, #13
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 fc58 	bl	8001a9c <HAL_RCC_OscConfig>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80011f0:	f000 f8b4 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	003b      	movs	r3, r7
 80011f6:	2207      	movs	r2, #7
 80011f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fa:	003b      	movs	r3, r7
 80011fc:	2202      	movs	r2, #2
 80011fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	003b      	movs	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001206:	003b      	movs	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800120c:	003b      	movs	r3, r7
 800120e:	2101      	movs	r1, #1
 8001210:	0018      	movs	r0, r3
 8001212:	f000 ff61 	bl	80020d8 <HAL_RCC_ClockConfig>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800121a:	f000 f89f 	bl	800135c <Error_Handler>
  }
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b011      	add	sp, #68	; 0x44
 8001224:	bd90      	pop	{r4, r7, pc}
	...

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_USART2_UART_Init+0x5c>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001234:	2296      	movs	r2, #150	; 0x96
 8001236:	0212      	lsls	r2, r2, #8
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800126c:	0018      	movs	r0, r3
 800126e:	f001 f879 	bl	8002364 <HAL_UART_Init>
 8001272:	1e03      	subs	r3, r0, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001276:	f000 f871 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001ac 	.word	0x200001ac
 8001284:	40004400 	.word	0x40004400

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	240c      	movs	r4, #12
 8001290:	193b      	adds	r3, r7, r4
 8001292:	0018      	movs	r0, r3
 8001294:	2314      	movs	r3, #20
 8001296:	001a      	movs	r2, r3
 8001298:	2100      	movs	r1, #0
 800129a:	f001 fc5d 	bl	8002b58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0309      	lsls	r1, r1, #12
 80012a8:	430a      	orrs	r2, r1
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	03c9      	lsls	r1, r1, #15
 80012c4:	430a      	orrs	r2, r1
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	03db      	lsls	r3, r3, #15
 80012d0:	4013      	ands	r3, r2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0289      	lsls	r1, r1, #10
 80012e0:	430a      	orrs	r2, r1
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012f2:	2390      	movs	r3, #144	; 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	2200      	movs	r2, #0
 80012f8:	2120      	movs	r1, #32
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 fb96 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0192      	lsls	r2, r2, #6
 8001306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001308:	193b      	adds	r3, r7, r4
 800130a:	2284      	movs	r2, #132	; 0x84
 800130c:	0392      	lsls	r2, r2, #14
 800130e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	193b      	adds	r3, r7, r4
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	193b      	adds	r3, r7, r4
 8001318:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <MX_GPIO_Init+0xd0>)
 800131a:	0019      	movs	r1, r3
 800131c:	0010      	movs	r0, r2
 800131e:	f000 fa15 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001322:	0021      	movs	r1, r4
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2220      	movs	r2, #32
 8001328:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2201      	movs	r2, #1
 800132e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	187a      	adds	r2, r7, r1
 800133e:	2390      	movs	r3, #144	; 0x90
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	0011      	movs	r1, r2
 8001344:	0018      	movs	r0, r3
 8001346:	f000 fa01 	bl	800174c <HAL_GPIO_Init>

}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b009      	add	sp, #36	; 0x24
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40021000 	.word	0x40021000
 8001358:	48000800 	.word	0x48000800

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x44>)
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_MspInit+0x44>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x44>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_MspInit+0x44>)
 8001388:	69da      	ldr	r2, [r3, #28]
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_MspInit+0x44>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0549      	lsls	r1, r1, #21
 8001390:	430a      	orrs	r2, r1
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_MspInit+0x44>)
 8001396:	69da      	ldr	r2, [r3, #28]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	4013      	ands	r3, r2
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	2414      	movs	r4, #20
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	0018      	movs	r0, r3
 80013be:	2314      	movs	r3, #20
 80013c0:	001a      	movs	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	f001 fbc8 	bl	8002b58 <memset>
  if(huart->Instance==USART2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_UART_MspInit+0x90>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d132      	bne.n	8001438 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013d4:	69da      	ldr	r2, [r3, #28]
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	0289      	lsls	r1, r1, #10
 80013dc:	430a      	orrs	r2, r1
 80013de:	61da      	str	r2, [r3, #28]
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013e2:	69da      	ldr	r2, [r3, #28]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	0289      	lsls	r1, r1, #10
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x94>)
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800140a:	0021      	movs	r1, r4
 800140c:	187b      	adds	r3, r7, r1
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2202      	movs	r2, #2
 8001416:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2203      	movs	r2, #3
 8001422:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2201      	movs	r2, #1
 8001428:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	187a      	adds	r2, r7, r1
 800142c:	2390      	movs	r3, #144	; 0x90
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	0011      	movs	r1, r2
 8001432:	0018      	movs	r0, r3
 8001434:	f000 f98a 	bl	800174c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b00b      	add	sp, #44	; 0x2c
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f87a 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001482:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001484:	f7ff fff7 	bl	8001476 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014ae:	f001 fb2f 	bl	8002b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b2:	f7ff fe5b 	bl	800116c <main>

080014b6 <LoopForever>:

LoopForever:
    b LoopForever
 80014b6:	e7fe      	b.n	80014b6 <LoopForever>
  ldr   r0, =_estack
 80014b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014bc:	20000180 	.word	0x20000180
  ldr r1, =_edata
 80014c0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80014c4:	08002bc0 	.word	0x08002bc0
  ldr r2, =_sbss
 80014c8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80014cc:	20000238 	.word	0x20000238

080014d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_IRQHandler>
	...

080014d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_Init+0x24>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_Init+0x24>)
 80014de:	2110      	movs	r1, #16
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f809 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff ff3d 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_InitTick+0x5c>)
 8001506:	681c      	ldr	r4, [r3, #0]
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	0019      	movs	r1, r3
 800150e:	23fa      	movs	r3, #250	; 0xfa
 8001510:	0098      	lsls	r0, r3, #2
 8001512:	f7ff fd9f 	bl	8001054 <__udivsi3>
 8001516:	0003      	movs	r3, r0
 8001518:	0019      	movs	r1, r3
 800151a:	0020      	movs	r0, r4
 800151c:	f7ff fd9a 	bl	8001054 <__udivsi3>
 8001520:	0003      	movs	r3, r0
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f905 	bl	8001732 <HAL_SYSTICK_Config>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e00f      	b.n	8001550 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d80b      	bhi.n	800154e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2301      	movs	r3, #1
 800153a:	425b      	negs	r3, r3
 800153c:	2200      	movs	r2, #0
 800153e:	0018      	movs	r0, r3
 8001540:	f000 f8e2 	bl	8001708 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_InitTick+0x64>)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b003      	add	sp, #12
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	20000184 	.word	0x20000184
 800155c:	2000018c 	.word	0x2000018c
 8001560:	20000188 	.word	0x20000188

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	001a      	movs	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	18d2      	adds	r2, r2, r3
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_IncTick+0x20>)
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	2000018c 	.word	0x2000018c
 8001584:	20000234 	.word	0x20000234

08001588 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	20000234 	.word	0x20000234

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff0 	bl	8001588 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	001a      	movs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	f7ff ffe0 	bl	8001588 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	2000018c 	.word	0x2000018c

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b7f      	cmp	r3, #127	; 0x7f
 80015f8:	d828      	bhi.n	800164c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fa:	4a2f      	ldr	r2, [pc, #188]	; (80016b8 <__NVIC_SetPriority+0xd4>)
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b25b      	sxtb	r3, r3
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	33c0      	adds	r3, #192	; 0xc0
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	589b      	ldr	r3, [r3, r2]
 800160a:	1dfa      	adds	r2, r7, #7
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	0011      	movs	r1, r2
 8001610:	2203      	movs	r2, #3
 8001612:	400a      	ands	r2, r1
 8001614:	00d2      	lsls	r2, r2, #3
 8001616:	21ff      	movs	r1, #255	; 0xff
 8001618:	4091      	lsls	r1, r2
 800161a:	000a      	movs	r2, r1
 800161c:	43d2      	mvns	r2, r2
 800161e:	401a      	ands	r2, r3
 8001620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	401a      	ands	r2, r3
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	0018      	movs	r0, r3
 8001630:	2303      	movs	r3, #3
 8001632:	4003      	ands	r3, r0
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001638:	481f      	ldr	r0, [pc, #124]	; (80016b8 <__NVIC_SetPriority+0xd4>)
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b25b      	sxtb	r3, r3
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	430a      	orrs	r2, r1
 8001644:	33c0      	adds	r3, #192	; 0xc0
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800164a:	e031      	b.n	80016b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <__NVIC_SetPriority+0xd8>)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0019      	movs	r1, r3
 8001654:	230f      	movs	r3, #15
 8001656:	400b      	ands	r3, r1
 8001658:	3b08      	subs	r3, #8
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3306      	adds	r3, #6
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	3304      	adds	r3, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1dfa      	adds	r2, r7, #7
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	0011      	movs	r1, r2
 800166c:	2203      	movs	r2, #3
 800166e:	400a      	ands	r2, r1
 8001670:	00d2      	lsls	r2, r2, #3
 8001672:	21ff      	movs	r1, #255	; 0xff
 8001674:	4091      	lsls	r1, r2
 8001676:	000a      	movs	r2, r1
 8001678:	43d2      	mvns	r2, r2
 800167a:	401a      	ands	r2, r3
 800167c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	22ff      	movs	r2, #255	; 0xff
 8001684:	401a      	ands	r2, r3
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	0018      	movs	r0, r3
 800168c:	2303      	movs	r3, #3
 800168e:	4003      	ands	r3, r0
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <__NVIC_SetPriority+0xd8>)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	001c      	movs	r4, r3
 800169c:	230f      	movs	r3, #15
 800169e:	4023      	ands	r3, r4
 80016a0:	3b08      	subs	r3, #8
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	430a      	orrs	r2, r1
 80016a6:	3306      	adds	r3, #6
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	18c3      	adds	r3, r0, r3
 80016ac:	3304      	adds	r3, #4
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b003      	add	sp, #12
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	045b      	lsls	r3, r3, #17
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d301      	bcc.n	80016d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d4:	2301      	movs	r3, #1
 80016d6:	e010      	b.n	80016fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <SysTick_Config+0x44>)
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	3a01      	subs	r2, #1
 80016de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e0:	2301      	movs	r3, #1
 80016e2:	425b      	negs	r3, r3
 80016e4:	2103      	movs	r1, #3
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7ff ff7c 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x44>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x44>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	210f      	movs	r1, #15
 8001714:	187b      	adds	r3, r7, r1
 8001716:	1c02      	adds	r2, r0, #0
 8001718:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	187b      	adds	r3, r7, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff ffbf 	bl	80016c0 <SysTick_Config>
 8001742:	0003      	movs	r3, r0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	e14f      	b.n	80019fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4091      	lsls	r1, r2
 8001766:	000a      	movs	r2, r1
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <HAL_GPIO_Init+0x28>
 8001772:	e140      	b.n	80019f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2203      	movs	r2, #3
 800177a:	4013      	ands	r3, r2
 800177c:	2b01      	cmp	r3, #1
 800177e:	d005      	beq.n	800178c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2203      	movs	r2, #3
 8001786:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001788:	2b02      	cmp	r3, #2
 800178a:	d130      	bne.n	80017ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	409a      	lsls	r2, r3
 800179a:	0013      	movs	r3, r2
 800179c:	43da      	mvns	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c2:	2201      	movs	r2, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	2201      	movs	r2, #1
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d017      	beq.n	800182a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2203      	movs	r2, #3
 8001830:	4013      	ands	r3, r2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d123      	bne.n	800187e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	58d3      	ldr	r3, [r2, r3]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2207      	movs	r2, #7
 8001848:	4013      	ands	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2107      	movs	r1, #7
 8001862:	400b      	ands	r3, r1
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	6939      	ldr	r1, [r7, #16]
 800187c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	401a      	ands	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	4013      	ands	r3, r2
 80018bc:	d100      	bne.n	80018c0 <HAL_GPIO_Init+0x174>
 80018be:	e09a      	b.n	80019f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c0:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	619a      	str	r2, [r3, #24]
 80018cc:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d8:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <HAL_GPIO_Init+0x2cc>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	589b      	ldr	r3, [r3, r2]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4013      	ands	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	43da      	mvns	r2, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	2390      	movs	r3, #144	; 0x90
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	429a      	cmp	r2, r3
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x1e2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x1de>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a43      	ldr	r2, [pc, #268]	; (8001a20 <HAL_GPIO_Init+0x2d4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x1da>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a42      	ldr	r2, [pc, #264]	; (8001a24 <HAL_GPIO_Init+0x2d8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x1d6>
 800191e:	2303      	movs	r3, #3
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x1e4>
 8001922:	2305      	movs	r3, #5
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x1e4>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x1e4>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x1e4>
 800192e:	2300      	movs	r3, #0
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	2103      	movs	r1, #3
 8001934:	400a      	ands	r2, r1
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x2cc>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	035b      	lsls	r3, r3, #13
 8001966:	4013      	ands	r3, r2
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43da      	mvns	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	039b      	lsls	r3, r3, #14
 8001990:	4013      	ands	r3, r2
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43da      	mvns	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43da      	mvns	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	4013      	ands	r3, r2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	40da      	lsrs	r2, r3
 8001a04:	1e13      	subs	r3, r2, #0
 8001a06:	d000      	beq.n	8001a0a <HAL_GPIO_Init+0x2be>
 8001a08:	e6a8      	b.n	800175c <HAL_GPIO_Init+0x10>
  } 
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b006      	add	sp, #24
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	48000c00 	.word	0x48000c00
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	0008      	movs	r0, r1
 8001a36:	0011      	movs	r1, r2
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	1c02      	adds	r2, r0, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	1c7b      	adds	r3, r7, #1
 8001a40:	1c0a      	adds	r2, r1, #0
 8001a42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a44:	1c7b      	adds	r3, r7, #1
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a54:	e003      	b.n	8001a5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a56:	1cbb      	adds	r3, r7, #2
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	000a      	movs	r2, r1
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a7a:	1cbb      	adds	r3, r7, #2
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	1cb9      	adds	r1, r7, #2
 8001a8a:	8809      	ldrh	r1, [r1, #0]
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e305      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x1e>
 8001ab8:	e08d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aba:	4bc5      	ldr	r3, [pc, #788]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d00e      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac6:	4bc2      	ldr	r3, [pc, #776]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	220c      	movs	r2, #12
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x64>
 8001ad2:	4bbf      	ldr	r3, [pc, #764]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	401a      	ands	r2, r3
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4bba      	ldr	r3, [pc, #744]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x56>
 8001af0:	e070      	b.n	8001bd4 <HAL_RCC_OscConfig+0x138>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d000      	beq.n	8001afc <HAL_RCC_OscConfig+0x60>
 8001afa:	e06b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e2dc      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_OscConfig+0x7c>
 8001b08:	4bb1      	ldr	r3, [pc, #708]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4bb0      	ldr	r3, [pc, #704]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0249      	lsls	r1, r1, #9
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e02f      	b.n	8001b78 <HAL_RCC_OscConfig+0xdc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x9e>
 8001b20:	4bab      	ldr	r3, [pc, #684]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4baa      	ldr	r3, [pc, #680]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b26:	49ab      	ldr	r1, [pc, #684]	; (8001dd4 <HAL_RCC_OscConfig+0x338>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4ba8      	ldr	r3, [pc, #672]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4ba7      	ldr	r3, [pc, #668]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b32:	49a9      	ldr	r1, [pc, #676]	; (8001dd8 <HAL_RCC_OscConfig+0x33c>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e01e      	b.n	8001b78 <HAL_RCC_OscConfig+0xdc>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d10e      	bne.n	8001b60 <HAL_RCC_OscConfig+0xc4>
 8001b42:	4ba3      	ldr	r3, [pc, #652]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4ba2      	ldr	r3, [pc, #648]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	02c9      	lsls	r1, r1, #11
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b9f      	ldr	r3, [pc, #636]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b9e      	ldr	r3, [pc, #632]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0249      	lsls	r1, r1, #9
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xdc>
 8001b60:	4b9b      	ldr	r3, [pc, #620]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b9a      	ldr	r3, [pc, #616]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b66:	499b      	ldr	r1, [pc, #620]	; (8001dd4 <HAL_RCC_OscConfig+0x338>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	4b98      	ldr	r3, [pc, #608]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b97      	ldr	r3, [pc, #604]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b72:	4999      	ldr	r1, [pc, #612]	; (8001dd8 <HAL_RCC_OscConfig+0x33c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d014      	beq.n	8001baa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fd02 	bl	8001588 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8a:	f7ff fcfd 	bl	8001588 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b64      	cmp	r3, #100	; 0x64
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e28e      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0xee>
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fced 	bl	8001588 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fce8 	bl	8001588 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e279      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x118>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x146>
 8001be0:	e06c      	b.n	8001cbc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	220c      	movs	r2, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	d00e      	beq.n	8001c0a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bec:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d11f      	bne.n	8001c38 <HAL_RCC_OscConfig+0x19c>
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	23c0      	movs	r3, #192	; 0xc0
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	401a      	ands	r2, r3
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	4b71      	ldr	r3, [pc, #452]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x184>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e24c      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	22f8      	movs	r2, #248	; 0xf8
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00da      	lsls	r2, r3, #3
 8001c30:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	e041      	b.n	8001cbc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d024      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b62      	ldr	r3, [pc, #392]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fc9c 	bl	8001588 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff fc97 	bl	8001588 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e228      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d0f1      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	22f8      	movs	r2, #248	; 0xf8
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00da      	lsls	r2, r3, #3
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e018      	b.n	8001cbc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	438a      	bics	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fc77 	bl	8001588 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc72 	bl	8001588 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e203      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d1f1      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d036      	beq.n	8001d34 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fc55 	bl	8001588 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc50 	bl	8001588 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1e1      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d0f1      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x248>
 8001d00:	e018      	b.n	8001d34 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d02:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fc3b 	bl	8001588 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc36 	bl	8001588 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1c7      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f1      	bne.n	8001d18 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d100      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2a4>
 8001d3e:	e0b5      	b.n	8001eac <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d40:	201f      	movs	r0, #31
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	055b      	lsls	r3, r3, #21
 8001d50:	4013      	ands	r3, r2
 8001d52:	d110      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0549      	lsls	r1, r1, #21
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	61da      	str	r2, [r3, #28]
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	055b      	lsls	r3, r3, #21
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_OscConfig+0x340>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_RCC_OscConfig+0x340>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_RCC_OscConfig+0x340>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0049      	lsls	r1, r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fbfa 	bl	8001588 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff fbf5 	bl	8001588 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e186      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x340>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d10f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x344>
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_RCC_OscConfig+0x334>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
 8001dcc:	e036      	b.n	8001e3c <HAL_RCC_OscConfig+0x3a0>
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	fffeffff 	.word	0xfffeffff
 8001dd8:	fffbffff 	.word	0xfffbffff
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x366>
 8001de8:	4bb6      	ldr	r3, [pc, #728]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	4bb5      	ldr	r3, [pc, #724]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	621a      	str	r2, [r3, #32]
 8001df4:	4bb3      	ldr	r3, [pc, #716]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4bb2      	ldr	r3, [pc, #712]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x3a0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x388>
 8001e0a:	4bae      	ldr	r3, [pc, #696]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	4bad      	ldr	r3, [pc, #692]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e10:	2104      	movs	r1, #4
 8001e12:	430a      	orrs	r2, r1
 8001e14:	621a      	str	r2, [r3, #32]
 8001e16:	4bab      	ldr	r3, [pc, #684]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	4baa      	ldr	r3, [pc, #680]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	621a      	str	r2, [r3, #32]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0x3a0>
 8001e24:	4ba7      	ldr	r3, [pc, #668]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	4ba6      	ldr	r3, [pc, #664]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	621a      	str	r2, [r3, #32]
 8001e30:	4ba4      	ldr	r3, [pc, #656]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	4ba3      	ldr	r3, [pc, #652]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e36:	2104      	movs	r1, #4
 8001e38:	438a      	bics	r2, r1
 8001e3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d014      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fba0 	bl	8001588 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff fb9b 	bl	8001588 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a9b      	ldr	r2, [pc, #620]	; (80020c8 <HAL_RCC_OscConfig+0x62c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e12b      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	4b98      	ldr	r3, [pc, #608]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3b2>
 8001e6c:	e013      	b.n	8001e96 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb8b 	bl	8001588 <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff fb86 	bl	8001588 <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a91      	ldr	r2, [pc, #580]	; (80020c8 <HAL_RCC_OscConfig+0x62c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e116      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	4b8d      	ldr	r3, [pc, #564]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ea6:	4989      	ldr	r1, [pc, #548]	; (80020cc <HAL_RCC_OscConfig+0x630>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ebe:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec2:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001eca:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ece:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb57 	bl	8001588 <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ee0:	f7ff fb52 	bl	8001588 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0e3      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ef2:	4b74      	ldr	r3, [pc, #464]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0f1      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001efc:	4b71      	ldr	r3, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	22f8      	movs	r2, #248	; 0xf8
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
 8001f12:	e034      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	3305      	adds	r3, #5
 8001f1a:	d111      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f1c:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f22:	2104      	movs	r1, #4
 8001f24:	438a      	bics	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	22f8      	movs	r2, #248	; 0xf8
 8001f2e:	4393      	bics	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	00da      	lsls	r2, r3, #3
 8001f38:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3e:	e01e      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f40:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f44:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f46:	2104      	movs	r1, #4
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f4c:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f50:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	438a      	bics	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fb16 	bl	8001588 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f62:	f7ff fb11 	bl	8001588 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0a2      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f1      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d100      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
 8001f86:	e097      	b.n	80020b8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	220c      	movs	r2, #12
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d100      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4fa>
 8001f94:	e06b      	b.n	800206e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d14c      	bne.n	8002038 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001fa4:	494a      	ldr	r1, [pc, #296]	; (80020d0 <HAL_RCC_OscConfig+0x634>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff faed 	bl	8001588 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fae8 	bl	8001588 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e079      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	049b      	lsls	r3, r3, #18
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe0:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <HAL_RCC_OscConfig+0x638>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0449      	lsls	r1, r1, #17
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fabb 	bl	8001588 <HAL_GetTick>
 8002012:	0003      	movs	r3, r0
 8002014:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff fab6 	bl	8001588 <HAL_GetTick>
 800201c:	0002      	movs	r2, r0
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e047      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	049b      	lsls	r3, r3, #18
 8002032:	4013      	ands	r3, r2
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x57c>
 8002036:	e03f      	b.n	80020b8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 800203e:	4924      	ldr	r1, [pc, #144]	; (80020d0 <HAL_RCC_OscConfig+0x634>)
 8002040:	400a      	ands	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff faa0 	bl	8001588 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff fa9b 	bl	8001588 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e02c      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	049b      	lsls	r3, r3, #18
 8002068:	4013      	ands	r3, r2
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x5b2>
 800206c:	e024      	b.n	80020b8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e01f      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCC_OscConfig+0x628>)
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	23c0      	movs	r3, #192	; 0xc0
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	401a      	ands	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	429a      	cmp	r2, r3
 8002094:	d10e      	bne.n	80020b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	220f      	movs	r2, #15
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	23f0      	movs	r3, #240	; 0xf0
 80020a8:	039b      	lsls	r3, r3, #14
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b008      	add	sp, #32
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40021000 	.word	0x40021000
 80020c8:	00001388 	.word	0x00001388
 80020cc:	efffffff 	.word	0xefffffff
 80020d0:	feffffff 	.word	0xfeffffff
 80020d4:	ffc27fff 	.word	0xffc27fff

080020d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b3      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d911      	bls.n	800211e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2201      	movs	r2, #1
 8002112:	4013      	ands	r3, r2
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e09a      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d015      	beq.n	8002154 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2204      	movs	r2, #4
 800212e:	4013      	ands	r3, r2
 8002130:	d006      	beq.n	8002140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002132:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002138:	21e0      	movs	r1, #224	; 0xe0
 800213a:	00c9      	lsls	r1, r1, #3
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	22f0      	movs	r2, #240	; 0xf0
 8002146:	4393      	bics	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	4013      	ands	r3, r2
 800215c:	d040      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	4013      	ands	r3, r2
 8002170:	d114      	bne.n	800219c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06e      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	049b      	lsls	r3, r3, #18
 8002186:	4013      	ands	r3, r2
 8002188:	d108      	bne.n	800219c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e062      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2202      	movs	r2, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e05b      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4393      	bics	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff f9ea 	bl	8001588 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	e009      	b.n	80021ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f7ff f9e5 	bl	8001588 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_RCC_ClockConfig+0x18c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e042      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	220c      	movs	r2, #12
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1ec      	bne.n	80021ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d211      	bcs.n	8002212 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4393      	bics	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x184>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e020      	b.n	8002254 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2204      	movs	r2, #4
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_RCC_ClockConfig+0x190>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002230:	f000 f820 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002234:	0001      	movs	r1, r0
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x188>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x194>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	000a      	movs	r2, r1
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x198>)
 800224a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff f955 	bl	80014fc <HAL_InitTick>
  
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	00001388 	.word	0x00001388
 8002268:	fffff8ff 	.word	0xfffff8ff
 800226c:	08002b80 	.word	0x08002b80
 8002270:	20000184 	.word	0x20000184

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	220c      	movs	r2, #12
 8002298:	4013      	ands	r3, r2
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e02e      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	220f      	movs	r2, #15
 80022b0:	4013      	ands	r3, r2
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_RCC_GetSysClockFreq+0xa8>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	220f      	movs	r2, #15
 80022be:	4013      	ands	r3, r2
 80022c0:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_RCC_GetSysClockFreq+0xac>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	025b      	lsls	r3, r3, #9
 80022cc:	401a      	ands	r2, r3
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	025b      	lsls	r3, r3, #9
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	480f      	ldr	r0, [pc, #60]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022da:	f7fe febb 	bl	8001054 <__udivsi3>
 80022de:	0003      	movs	r3, r0
 80022e0:	001a      	movs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4353      	muls	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e008      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ee:	f7fe feb1 	bl	8001054 <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	001a      	movs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4353      	muls	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]
      break;
 8002300:	e002      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002304:	613b      	str	r3, [r7, #16]
      break;
 8002306:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002308:	693b      	ldr	r3, [r7, #16]
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b006      	add	sp, #24
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40021000 	.word	0x40021000
 8002318:	007a1200 	.word	0x007a1200
 800231c:	08002b98 	.word	0x08002b98
 8002320:	08002ba8 	.word	0x08002ba8

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_RCC_GetHCLKFreq+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000184 	.word	0x20000184

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800233c:	f7ff fff2 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002340:	0001      	movs	r1, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	2207      	movs	r2, #7
 800234a:	4013      	ands	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	40d9      	lsrs	r1, r3
 8002352:	000b      	movs	r3, r1
}    
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	08002b90 	.word	0x08002b90

08002364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e044      	b.n	8002400 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2278      	movs	r2, #120	; 0x78
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f7ff f811 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2224      	movs	r2, #36	; 0x24
 8002392:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f830 	bl	800240c <UART_SetConfig>
 80023ac:	0003      	movs	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e024      	b.n	8002400 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f97b 	bl	80026bc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	490d      	ldr	r1, [pc, #52]	; (8002408 <HAL_UART_Init+0xa4>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2108      	movs	r1, #8
 80023e2:	438a      	bics	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 fa13 	bl	8002824 <UART_CheckIdleState>
 80023fe:	0003      	movs	r3, r0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}
 8002408:	fffff7ff 	.word	0xfffff7ff

0800240c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002414:	231e      	movs	r3, #30
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a97      	ldr	r2, [pc, #604]	; (8002698 <UART_SetConfig+0x28c>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a92      	ldr	r2, [pc, #584]	; (800269c <UART_SetConfig+0x290>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a89      	ldr	r2, [pc, #548]	; (80026a0 <UART_SetConfig+0x294>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	430a      	orrs	r2, r1
 8002486:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <UART_SetConfig+0x298>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d127      	bne.n	80024e2 <UART_SetConfig+0xd6>
 8002492:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <UART_SetConfig+0x29c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	2203      	movs	r2, #3
 8002498:	4013      	ands	r3, r2
 800249a:	2b03      	cmp	r3, #3
 800249c:	d00d      	beq.n	80024ba <UART_SetConfig+0xae>
 800249e:	d81b      	bhi.n	80024d8 <UART_SetConfig+0xcc>
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d014      	beq.n	80024ce <UART_SetConfig+0xc2>
 80024a4:	d818      	bhi.n	80024d8 <UART_SetConfig+0xcc>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <UART_SetConfig+0xa4>
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d00a      	beq.n	80024c4 <UART_SetConfig+0xb8>
 80024ae:	e013      	b.n	80024d8 <UART_SetConfig+0xcc>
 80024b0:	231f      	movs	r3, #31
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e035      	b.n	8002526 <UART_SetConfig+0x11a>
 80024ba:	231f      	movs	r3, #31
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e030      	b.n	8002526 <UART_SetConfig+0x11a>
 80024c4:	231f      	movs	r3, #31
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2204      	movs	r2, #4
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e02b      	b.n	8002526 <UART_SetConfig+0x11a>
 80024ce:	231f      	movs	r3, #31
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	2208      	movs	r2, #8
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e026      	b.n	8002526 <UART_SetConfig+0x11a>
 80024d8:	231f      	movs	r3, #31
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2210      	movs	r2, #16
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e021      	b.n	8002526 <UART_SetConfig+0x11a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	; (80026ac <UART_SetConfig+0x2a0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d104      	bne.n	80024f6 <UART_SetConfig+0xea>
 80024ec:	231f      	movs	r3, #31
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e017      	b.n	8002526 <UART_SetConfig+0x11a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6d      	ldr	r2, [pc, #436]	; (80026b0 <UART_SetConfig+0x2a4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d104      	bne.n	800250a <UART_SetConfig+0xfe>
 8002500:	231f      	movs	r3, #31
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e00d      	b.n	8002526 <UART_SetConfig+0x11a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a69      	ldr	r2, [pc, #420]	; (80026b4 <UART_SetConfig+0x2a8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d104      	bne.n	800251e <UART_SetConfig+0x112>
 8002514:	231f      	movs	r3, #31
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e003      	b.n	8002526 <UART_SetConfig+0x11a>
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2210      	movs	r2, #16
 8002524:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	429a      	cmp	r2, r3
 8002530:	d15c      	bne.n	80025ec <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b08      	cmp	r3, #8
 800253a:	d015      	beq.n	8002568 <UART_SetConfig+0x15c>
 800253c:	dc18      	bgt.n	8002570 <UART_SetConfig+0x164>
 800253e:	2b04      	cmp	r3, #4
 8002540:	d00d      	beq.n	800255e <UART_SetConfig+0x152>
 8002542:	dc15      	bgt.n	8002570 <UART_SetConfig+0x164>
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <UART_SetConfig+0x142>
 8002548:	2b02      	cmp	r3, #2
 800254a:	d005      	beq.n	8002558 <UART_SetConfig+0x14c>
 800254c:	e010      	b.n	8002570 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800254e:	f7ff fef3 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
        break;
 8002556:	e012      	b.n	800257e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <UART_SetConfig+0x2ac>)
 800255a:	61bb      	str	r3, [r7, #24]
        break;
 800255c:	e00f      	b.n	800257e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800255e:	f7ff fe89 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]
        break;
 8002566:	e00a      	b.n	800257e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	61bb      	str	r3, [r7, #24]
        break;
 800256e:	e006      	b.n	800257e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002574:	231e      	movs	r3, #30
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
        break;
 800257c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d100      	bne.n	8002586 <UART_SetConfig+0x17a>
 8002584:	e07a      	b.n	800267c <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	005a      	lsls	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	18d2      	adds	r2, r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0019      	movs	r1, r3
 8002598:	0010      	movs	r0, r2
 800259a:	f7fe fd5b 	bl	8001054 <__udivsi3>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d91c      	bls.n	80025e2 <UART_SetConfig+0x1d6>
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	025b      	lsls	r3, r3, #9
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d217      	bcs.n	80025e2 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	200e      	movs	r0, #14
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	210f      	movs	r1, #15
 80025bc:	438a      	bics	r2, r1
 80025be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2207      	movs	r2, #7
 80025c8:	4013      	ands	r3, r2
 80025ca:	b299      	uxth	r1, r3
 80025cc:	183b      	adds	r3, r7, r0
 80025ce:	183a      	adds	r2, r7, r0
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	183a      	adds	r2, r7, r0
 80025dc:	8812      	ldrh	r2, [r2, #0]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	e04c      	b.n	800267c <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80025e2:	231e      	movs	r3, #30
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e047      	b.n	800267c <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025ec:	231f      	movs	r3, #31
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d015      	beq.n	8002622 <UART_SetConfig+0x216>
 80025f6:	dc18      	bgt.n	800262a <UART_SetConfig+0x21e>
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00d      	beq.n	8002618 <UART_SetConfig+0x20c>
 80025fc:	dc15      	bgt.n	800262a <UART_SetConfig+0x21e>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <UART_SetConfig+0x1fc>
 8002602:	2b02      	cmp	r3, #2
 8002604:	d005      	beq.n	8002612 <UART_SetConfig+0x206>
 8002606:	e010      	b.n	800262a <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002608:	f7ff fe96 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 800260c:	0003      	movs	r3, r0
 800260e:	61bb      	str	r3, [r7, #24]
        break;
 8002610:	e012      	b.n	8002638 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <UART_SetConfig+0x2ac>)
 8002614:	61bb      	str	r3, [r7, #24]
        break;
 8002616:	e00f      	b.n	8002638 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002618:	f7ff fe2c 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 800261c:	0003      	movs	r3, r0
 800261e:	61bb      	str	r3, [r7, #24]
        break;
 8002620:	e00a      	b.n	8002638 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	61bb      	str	r3, [r7, #24]
        break;
 8002628:	e006      	b.n	8002638 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800262e:	231e      	movs	r3, #30
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
        break;
 8002636:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01e      	beq.n	800267c <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	085a      	lsrs	r2, r3, #1
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	18d2      	adds	r2, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f7fe fd00 	bl	8001054 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	d90a      	bls.n	8002674 <UART_SetConfig+0x268>
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	025b      	lsls	r3, r3, #9
 8002664:	429a      	cmp	r2, r3
 8002666:	d205      	bcs.n	8002674 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	e003      	b.n	800267c <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002674:	231e      	movs	r3, #30
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002688:	231e      	movs	r3, #30
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b008      	add	sp, #32
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	efff69f3 	.word	0xefff69f3
 800269c:	ffffcfff 	.word	0xffffcfff
 80026a0:	fffff4ff 	.word	0xfffff4ff
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40004400 	.word	0x40004400
 80026b0:	40004800 	.word	0x40004800
 80026b4:	40004c00 	.word	0x40004c00
 80026b8:	007a1200 	.word	0x007a1200

080026bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d00b      	beq.n	80026e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <UART_AdvFeatureConfig+0x144>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d00b      	beq.n	8002708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a43      	ldr	r2, [pc, #268]	; (8002804 <UART_AdvFeatureConfig+0x148>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2204      	movs	r2, #4
 800270e:	4013      	ands	r3, r2
 8002710:	d00b      	beq.n	800272a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <UART_AdvFeatureConfig+0x14c>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2208      	movs	r2, #8
 8002730:	4013      	ands	r3, r2
 8002732:	d00b      	beq.n	800274c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <UART_AdvFeatureConfig+0x150>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2210      	movs	r2, #16
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <UART_AdvFeatureConfig+0x154>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2220      	movs	r2, #32
 8002774:	4013      	ands	r3, r2
 8002776:	d00b      	beq.n	8002790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <UART_AdvFeatureConfig+0x158>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2240      	movs	r2, #64	; 0x40
 8002796:	4013      	ands	r3, r2
 8002798:	d01d      	beq.n	80027d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <UART_AdvFeatureConfig+0x15c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	035b      	lsls	r3, r3, #13
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d10b      	bne.n	80027d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <UART_AdvFeatureConfig+0x160>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	4013      	ands	r3, r2
 80027de:	d00b      	beq.n	80027f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <UART_AdvFeatureConfig+0x164>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
  }
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	fffdffff 	.word	0xfffdffff
 8002804:	fffeffff 	.word	0xfffeffff
 8002808:	fffbffff 	.word	0xfffbffff
 800280c:	ffff7fff 	.word	0xffff7fff
 8002810:	ffffefff 	.word	0xffffefff
 8002814:	ffffdfff 	.word	0xffffdfff
 8002818:	ffefffff 	.word	0xffefffff
 800281c:	ff9fffff 	.word	0xff9fffff
 8002820:	fff7ffff 	.word	0xfff7ffff

08002824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b092      	sub	sp, #72	; 0x48
 8002828:	af02      	add	r7, sp, #8
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2284      	movs	r2, #132	; 0x84
 8002830:	2100      	movs	r1, #0
 8002832:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002834:	f7fe fea8 	bl	8001588 <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	4013      	ands	r3, r2
 8002846:	2b08      	cmp	r3, #8
 8002848:	d12c      	bne.n	80028a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	0391      	lsls	r1, r2, #14
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4a46      	ldr	r2, [pc, #280]	; (800296c <UART_CheckIdleState+0x148>)
 8002854:	9200      	str	r2, [sp, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	f000 f88c 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d021      	beq.n	80028a4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002860:	f3ef 8310 	mrs	r3, PRIMASK
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002868:	63bb      	str	r3, [r7, #56]	; 0x38
 800286a:	2301      	movs	r3, #1
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	f383 8810 	msr	PRIMASK, r3
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	438a      	bics	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	f383 8810 	msr	PRIMASK, r3
}
 8002890:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2278      	movs	r2, #120	; 0x78
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e05f      	b.n	8002964 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d146      	bne.n	8002940 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	03d1      	lsls	r1, r2, #15
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4a2c      	ldr	r2, [pc, #176]	; (800296c <UART_CheckIdleState+0x148>)
 80028bc:	9200      	str	r2, [sp, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	f000 f858 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d03b      	beq.n	8002940 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c8:	f3ef 8310 	mrs	r3, PRIMASK
 80028cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
 80028d2:	2301      	movs	r3, #1
 80028d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4921      	ldr	r1, [pc, #132]	; (8002970 <UART_CheckIdleState+0x14c>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f383 8810 	msr	PRIMASK, r3
}
 80028f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fa:	f3ef 8310 	mrs	r3, PRIMASK
 80028fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002900:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
 8002904:	2301      	movs	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f383 8810 	msr	PRIMASK, r3
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f383 8810 	msr	PRIMASK, r3
}
 800292a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	2120      	movs	r1, #32
 8002932:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2278      	movs	r2, #120	; 0x78
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e011      	b.n	8002964 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	2120      	movs	r1, #32
 800294c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2278      	movs	r2, #120	; 0x78
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b010      	add	sp, #64	; 0x40
 800296a:	bd80      	pop	{r7, pc}
 800296c:	01ffffff 	.word	0x01ffffff
 8002970:	fffffedf 	.word	0xfffffedf

08002974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002984:	e04b      	b.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	3301      	adds	r3, #1
 800298a:	d048      	beq.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7fe fdfc 	bl	8001588 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e04b      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2204      	movs	r2, #4
 80029ae:	4013      	ands	r3, r2
 80029b0:	d035      	beq.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d111      	bne.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2208      	movs	r2, #8
 80029c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f83c 	bl	8002a48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2284      	movs	r2, #132	; 0x84
 80029d4:	2108      	movs	r1, #8
 80029d6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2278      	movs	r2, #120	; 0x78
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e02c      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	401a      	ands	r2, r3
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d112      	bne.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 f81f 	bl	8002a48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2284      	movs	r2, #132	; 0x84
 8002a0e:	2120      	movs	r1, #32
 8002a10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2278      	movs	r2, #120	; 0x78
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	4153      	adcs	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	001a      	movs	r2, r3
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d0a4      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a50:	f3ef 8310 	mrs	r3, PRIMASK
 8002a54:	617b      	str	r3, [r7, #20]
  return(result);
 8002a56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4926      	ldr	r1, [pc, #152]	; (8002b0c <UART_EndRxTransfer+0xc4>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f383 8810 	msr	PRIMASK, r3
}
 8002a80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a82:	f3ef 8310 	mrs	r3, PRIMASK
 8002a86:	623b      	str	r3, [r7, #32]
  return(result);
 8002a88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	f383 8810 	msr	PRIMASK, r3
}
 8002ab2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d118      	bne.n	8002aee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f383 8810 	msr	PRIMASK, r3
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2110      	movs	r1, #16
 8002ade:	438a      	bics	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f383 8810 	msr	PRIMASK, r3
}
 8002aec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	2120      	movs	r1, #32
 8002af4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00e      	add	sp, #56	; 0x38
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	fffffedf 	.word	0xfffffedf

08002b10 <__libc_init_array>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	2600      	movs	r6, #0
 8002b14:	4d0c      	ldr	r5, [pc, #48]	; (8002b48 <__libc_init_array+0x38>)
 8002b16:	4c0d      	ldr	r4, [pc, #52]	; (8002b4c <__libc_init_array+0x3c>)
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	42a6      	cmp	r6, r4
 8002b1e:	d109      	bne.n	8002b34 <__libc_init_array+0x24>
 8002b20:	2600      	movs	r6, #0
 8002b22:	f000 f821 	bl	8002b68 <_init>
 8002b26:	4d0a      	ldr	r5, [pc, #40]	; (8002b50 <__libc_init_array+0x40>)
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <__libc_init_array+0x44>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	42a6      	cmp	r6, r4
 8002b30:	d105      	bne.n	8002b3e <__libc_init_array+0x2e>
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	00b3      	lsls	r3, r6, #2
 8002b36:	58eb      	ldr	r3, [r5, r3]
 8002b38:	4798      	blx	r3
 8002b3a:	3601      	adds	r6, #1
 8002b3c:	e7ee      	b.n	8002b1c <__libc_init_array+0xc>
 8002b3e:	00b3      	lsls	r3, r6, #2
 8002b40:	58eb      	ldr	r3, [r5, r3]
 8002b42:	4798      	blx	r3
 8002b44:	3601      	adds	r6, #1
 8002b46:	e7f2      	b.n	8002b2e <__libc_init_array+0x1e>
 8002b48:	08002bb8 	.word	0x08002bb8
 8002b4c:	08002bb8 	.word	0x08002bb8
 8002b50:	08002bb8 	.word	0x08002bb8
 8002b54:	08002bbc 	.word	0x08002bbc

08002b58 <memset>:
 8002b58:	0003      	movs	r3, r0
 8002b5a:	1882      	adds	r2, r0, r2
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d100      	bne.n	8002b62 <memset+0xa>
 8002b60:	4770      	bx	lr
 8002b62:	7019      	strb	r1, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	e7f9      	b.n	8002b5c <memset+0x4>

08002b68 <_init>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6e:	bc08      	pop	{r3}
 8002b70:	469e      	mov	lr, r3
 8002b72:	4770      	bx	lr

08002b74 <_fini>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr

Disassembly of section .mysection:

08018000 <Blink>:
void LOCATE_FUNC Blink(uint32_t dlyticks){
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8018008:	2390      	movs	r3, #144	; 0x90
 801800a:	05db      	lsls	r3, r3, #23
 801800c:	2120      	movs	r1, #32
 801800e:	0018      	movs	r0, r3
 8018010:	f7e9 fd29 	bl	8001a66 <HAL_GPIO_TogglePin>
	HAL_Delay(dlyticks);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	0018      	movs	r0, r3
 8018018:	f7e9 fac0 	bl	800159c <HAL_Delay>
}
 801801c:	46c0      	nop			; (mov r8, r8)
 801801e:	46bd      	mov	sp, r7
 8018020:	b002      	add	sp, #8
 8018022:	bd80      	pop	{r7, pc}
