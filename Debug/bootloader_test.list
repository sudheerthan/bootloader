
bootloader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00030100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00001b6c  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .mysection    00000024  08018000  08018000  00028000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000038  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08002bb0  08002bb0  00030180  2**0
                  CONTENTS
  7 .ARM          00000000  08002bb0  08002bb0  00030180  2**0
                  CONTENTS
  8 .preinit_array 00000000  08002bb0  08002bb0  00030180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000000c  20000180  08002bb8  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000000a8  2000018c  08002bc4  0002018c  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20000234  08002bc4  00020234  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY
 15 .debug_info   00007201  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001139  00000000  00000000  000373a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000588  00000000  00000000  000384e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000520  00000000  00000000  00038a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000f228  00000000  00000000  00038f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000071c5  00000000  00000000  000481b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0005c9fe  00000000  00000000  0004f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  000abd7b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00001284  00000000  00000000  000abdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	; (8001028 <__do_global_dtors_aux+0x1c>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <__do_global_dtors_aux+0x1a>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <__do_global_dtors_aux+0x20>)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <__do_global_dtors_aux+0x16>
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <__do_global_dtors_aux+0x24>)
 800101e:	e000      	b.n	8001022 <__do_global_dtors_aux+0x16>
 8001020:	bf00      	nop
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	2000018c 	.word	0x2000018c
 800102c:	00000000 	.word	0x00000000
 8001030:	08002b60 	.word	0x08002b60

08001034 <frame_dummy>:
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <frame_dummy+0x14>)
 8001036:	b510      	push	{r4, lr}
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <frame_dummy+0x10>
 800103c:	4903      	ldr	r1, [pc, #12]	; (800104c <frame_dummy+0x18>)
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <frame_dummy+0x1c>)
 8001040:	e000      	b.n	8001044 <frame_dummy+0x10>
 8001042:	bf00      	nop
 8001044:	bd10      	pop	{r4, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	00000000 	.word	0x00000000
 800104c:	20000190 	.word	0x20000190
 8001050:	08002b60 	.word	0x08002b60

08001054 <__udivsi3>:
 8001054:	2200      	movs	r2, #0
 8001056:	0843      	lsrs	r3, r0, #1
 8001058:	428b      	cmp	r3, r1
 800105a:	d374      	bcc.n	8001146 <__udivsi3+0xf2>
 800105c:	0903      	lsrs	r3, r0, #4
 800105e:	428b      	cmp	r3, r1
 8001060:	d35f      	bcc.n	8001122 <__udivsi3+0xce>
 8001062:	0a03      	lsrs	r3, r0, #8
 8001064:	428b      	cmp	r3, r1
 8001066:	d344      	bcc.n	80010f2 <__udivsi3+0x9e>
 8001068:	0b03      	lsrs	r3, r0, #12
 800106a:	428b      	cmp	r3, r1
 800106c:	d328      	bcc.n	80010c0 <__udivsi3+0x6c>
 800106e:	0c03      	lsrs	r3, r0, #16
 8001070:	428b      	cmp	r3, r1
 8001072:	d30d      	bcc.n	8001090 <__udivsi3+0x3c>
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	ba12      	rev	r2, r2
 800107a:	0c03      	lsrs	r3, r0, #16
 800107c:	428b      	cmp	r3, r1
 800107e:	d302      	bcc.n	8001086 <__udivsi3+0x32>
 8001080:	1212      	asrs	r2, r2, #8
 8001082:	0209      	lsls	r1, r1, #8
 8001084:	d065      	beq.n	8001152 <__udivsi3+0xfe>
 8001086:	0b03      	lsrs	r3, r0, #12
 8001088:	428b      	cmp	r3, r1
 800108a:	d319      	bcc.n	80010c0 <__udivsi3+0x6c>
 800108c:	e000      	b.n	8001090 <__udivsi3+0x3c>
 800108e:	0a09      	lsrs	r1, r1, #8
 8001090:	0bc3      	lsrs	r3, r0, #15
 8001092:	428b      	cmp	r3, r1
 8001094:	d301      	bcc.n	800109a <__udivsi3+0x46>
 8001096:	03cb      	lsls	r3, r1, #15
 8001098:	1ac0      	subs	r0, r0, r3
 800109a:	4152      	adcs	r2, r2
 800109c:	0b83      	lsrs	r3, r0, #14
 800109e:	428b      	cmp	r3, r1
 80010a0:	d301      	bcc.n	80010a6 <__udivsi3+0x52>
 80010a2:	038b      	lsls	r3, r1, #14
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	4152      	adcs	r2, r2
 80010a8:	0b43      	lsrs	r3, r0, #13
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d301      	bcc.n	80010b2 <__udivsi3+0x5e>
 80010ae:	034b      	lsls	r3, r1, #13
 80010b0:	1ac0      	subs	r0, r0, r3
 80010b2:	4152      	adcs	r2, r2
 80010b4:	0b03      	lsrs	r3, r0, #12
 80010b6:	428b      	cmp	r3, r1
 80010b8:	d301      	bcc.n	80010be <__udivsi3+0x6a>
 80010ba:	030b      	lsls	r3, r1, #12
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	4152      	adcs	r2, r2
 80010c0:	0ac3      	lsrs	r3, r0, #11
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d301      	bcc.n	80010ca <__udivsi3+0x76>
 80010c6:	02cb      	lsls	r3, r1, #11
 80010c8:	1ac0      	subs	r0, r0, r3
 80010ca:	4152      	adcs	r2, r2
 80010cc:	0a83      	lsrs	r3, r0, #10
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d301      	bcc.n	80010d6 <__udivsi3+0x82>
 80010d2:	028b      	lsls	r3, r1, #10
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	4152      	adcs	r2, r2
 80010d8:	0a43      	lsrs	r3, r0, #9
 80010da:	428b      	cmp	r3, r1
 80010dc:	d301      	bcc.n	80010e2 <__udivsi3+0x8e>
 80010de:	024b      	lsls	r3, r1, #9
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	4152      	adcs	r2, r2
 80010e4:	0a03      	lsrs	r3, r0, #8
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d301      	bcc.n	80010ee <__udivsi3+0x9a>
 80010ea:	020b      	lsls	r3, r1, #8
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	4152      	adcs	r2, r2
 80010f0:	d2cd      	bcs.n	800108e <__udivsi3+0x3a>
 80010f2:	09c3      	lsrs	r3, r0, #7
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d301      	bcc.n	80010fc <__udivsi3+0xa8>
 80010f8:	01cb      	lsls	r3, r1, #7
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	4152      	adcs	r2, r2
 80010fe:	0983      	lsrs	r3, r0, #6
 8001100:	428b      	cmp	r3, r1
 8001102:	d301      	bcc.n	8001108 <__udivsi3+0xb4>
 8001104:	018b      	lsls	r3, r1, #6
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4152      	adcs	r2, r2
 800110a:	0943      	lsrs	r3, r0, #5
 800110c:	428b      	cmp	r3, r1
 800110e:	d301      	bcc.n	8001114 <__udivsi3+0xc0>
 8001110:	014b      	lsls	r3, r1, #5
 8001112:	1ac0      	subs	r0, r0, r3
 8001114:	4152      	adcs	r2, r2
 8001116:	0903      	lsrs	r3, r0, #4
 8001118:	428b      	cmp	r3, r1
 800111a:	d301      	bcc.n	8001120 <__udivsi3+0xcc>
 800111c:	010b      	lsls	r3, r1, #4
 800111e:	1ac0      	subs	r0, r0, r3
 8001120:	4152      	adcs	r2, r2
 8001122:	08c3      	lsrs	r3, r0, #3
 8001124:	428b      	cmp	r3, r1
 8001126:	d301      	bcc.n	800112c <__udivsi3+0xd8>
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	4152      	adcs	r2, r2
 800112e:	0883      	lsrs	r3, r0, #2
 8001130:	428b      	cmp	r3, r1
 8001132:	d301      	bcc.n	8001138 <__udivsi3+0xe4>
 8001134:	008b      	lsls	r3, r1, #2
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	4152      	adcs	r2, r2
 800113a:	0843      	lsrs	r3, r0, #1
 800113c:	428b      	cmp	r3, r1
 800113e:	d301      	bcc.n	8001144 <__udivsi3+0xf0>
 8001140:	004b      	lsls	r3, r1, #1
 8001142:	1ac0      	subs	r0, r0, r3
 8001144:	4152      	adcs	r2, r2
 8001146:	1a41      	subs	r1, r0, r1
 8001148:	d200      	bcs.n	800114c <__udivsi3+0xf8>
 800114a:	4601      	mov	r1, r0
 800114c:	4152      	adcs	r2, r2
 800114e:	4610      	mov	r0, r2
 8001150:	4770      	bx	lr
 8001152:	e7ff      	b.n	8001154 <__udivsi3+0x100>
 8001154:	b501      	push	{r0, lr}
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f806 	bl	8001168 <__aeabi_idiv0>
 800115c:	bd02      	pop	{r1, pc}
 800115e:	46c0      	nop			; (mov r8, r8)

08001160 <__aeabi_uidivmod>:
 8001160:	2900      	cmp	r1, #0
 8001162:	d0f7      	beq.n	8001154 <__udivsi3+0x100>
 8001164:	e776      	b.n	8001054 <__udivsi3>
 8001166:	4770      	bx	lr

08001168 <__aeabi_idiv0>:
 8001168:	4770      	bx	lr
 800116a:	46c0      	nop			; (mov r8, r8)

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f000 f9ac 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f808 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f000 f882 	bl	8001280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800117c:	f000 f850 	bl	8001220 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Blink(100);
 8001180:	2064      	movs	r0, #100	; 0x64
 8001182:	f016 ff3d 	bl	8018000 <Blink>
 8001186:	e7fb      	b.n	8001180 <main+0x14>

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b091      	sub	sp, #68	; 0x44
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	2410      	movs	r4, #16
 8001190:	193b      	adds	r3, r7, r4
 8001192:	0018      	movs	r0, r3
 8001194:	2330      	movs	r3, #48	; 0x30
 8001196:	001a      	movs	r2, r3
 8001198:	2100      	movs	r1, #0
 800119a:	f001 fcd9 	bl	8002b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119e:	003b      	movs	r3, r7
 80011a0:	0018      	movs	r0, r3
 80011a2:	2310      	movs	r3, #16
 80011a4:	001a      	movs	r2, r3
 80011a6:	2100      	movs	r1, #0
 80011a8:	f001 fcd2 	bl	8002b50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	0021      	movs	r1, r4
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2202      	movs	r2, #2
 80011b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2201      	movs	r2, #1
 80011b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2210      	movs	r2, #16
 80011be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2202      	movs	r2, #2
 80011c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	0212      	lsls	r2, r2, #8
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0352      	lsls	r2, r2, #13
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fc58 	bl	8001a94 <HAL_RCC_OscConfig>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80011e8:	f000 f8b4 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	003b      	movs	r3, r7
 80011ee:	2207      	movs	r2, #7
 80011f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f2:	003b      	movs	r3, r7
 80011f4:	2202      	movs	r2, #2
 80011f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	003b      	movs	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fe:	003b      	movs	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001204:	003b      	movs	r3, r7
 8001206:	2101      	movs	r1, #1
 8001208:	0018      	movs	r0, r3
 800120a:	f000 ff61 	bl	80020d0 <HAL_RCC_ClockConfig>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001212:	f000 f89f 	bl	8001354 <Error_Handler>
  }
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b011      	add	sp, #68	; 0x44
 800121c:	bd90      	pop	{r4, r7, pc}
	...

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <MX_USART2_UART_Init+0x5c>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800122c:	2296      	movs	r2, #150	; 0x96
 800122e:	0212      	lsls	r2, r2, #8
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001264:	0018      	movs	r0, r3
 8001266:	f001 f879 	bl	800235c <HAL_UART_Init>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800126e:	f000 f871 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001a8 	.word	0x200001a8
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	240c      	movs	r4, #12
 8001288:	193b      	adds	r3, r7, r4
 800128a:	0018      	movs	r0, r3
 800128c:	2314      	movs	r3, #20
 800128e:	001a      	movs	r2, r3
 8001290:	2100      	movs	r1, #0
 8001292:	f001 fc5d 	bl	8002b50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_GPIO_Init+0xcc>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_GPIO_Init+0xcc>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0309      	lsls	r1, r1, #12
 80012a0:	430a      	orrs	r2, r1
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_GPIO_Init+0xcc>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	031b      	lsls	r3, r3, #12
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_GPIO_Init+0xcc>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_GPIO_Init+0xcc>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	03c9      	lsls	r1, r1, #15
 80012bc:	430a      	orrs	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_GPIO_Init+0xcc>)
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	03db      	lsls	r3, r3, #15
 80012c8:	4013      	ands	r3, r2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_GPIO_Init+0xcc>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_GPIO_Init+0xcc>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0289      	lsls	r1, r1, #10
 80012d8:	430a      	orrs	r2, r1
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_GPIO_Init+0xcc>)
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012ea:	2390      	movs	r3, #144	; 0x90
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	2200      	movs	r2, #0
 80012f0:	2120      	movs	r1, #32
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 fb96 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0192      	lsls	r2, r2, #6
 80012fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2284      	movs	r2, #132	; 0x84
 8001304:	0392      	lsls	r2, r2, #14
 8001306:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	193b      	adds	r3, r7, r4
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	193b      	adds	r3, r7, r4
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_GPIO_Init+0xd0>)
 8001312:	0019      	movs	r1, r3
 8001314:	0010      	movs	r0, r2
 8001316:	f000 fa15 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800131a:	0021      	movs	r1, r4
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2220      	movs	r2, #32
 8001320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2201      	movs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	187a      	adds	r2, r7, r1
 8001336:	2390      	movs	r3, #144	; 0x90
 8001338:	05db      	lsls	r3, r3, #23
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fa01 	bl	8001744 <HAL_GPIO_Init>

}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b009      	add	sp, #36	; 0x24
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	40021000 	.word	0x40021000
 8001350:	48000800 	.word	0x48000800

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	e7fe      	b.n	800135c <Error_Handler+0x8>
	...

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x44>)
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_MspInit+0x44>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	619a      	str	r2, [r3, #24]
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x44>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2201      	movs	r2, #1
 8001378:	4013      	ands	r3, r2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x44>)
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_MspInit+0x44>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0549      	lsls	r1, r1, #21
 8001388:	430a      	orrs	r2, r1
 800138a:	61da      	str	r2, [r3, #28]
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_MspInit+0x44>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	055b      	lsls	r3, r3, #21
 8001394:	4013      	ands	r3, r2
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	2414      	movs	r4, #20
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	0018      	movs	r0, r3
 80013b6:	2314      	movs	r3, #20
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f001 fbc8 	bl	8002b50 <memset>
  if(huart->Instance==USART2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_UART_MspInit+0x90>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d132      	bne.n	8001430 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_UART_MspInit+0x94>)
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_UART_MspInit+0x94>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0289      	lsls	r1, r1, #10
 80013d4:	430a      	orrs	r2, r1
 80013d6:	61da      	str	r2, [r3, #28]
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_UART_MspInit+0x94>)
 80013da:	69da      	ldr	r2, [r3, #28]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x94>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_UART_MspInit+0x94>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0289      	lsls	r1, r1, #10
 80013f0:	430a      	orrs	r2, r1
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_UART_MspInit+0x94>)
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	029b      	lsls	r3, r3, #10
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001402:	0021      	movs	r1, r4
 8001404:	187b      	adds	r3, r7, r1
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2202      	movs	r2, #2
 800140e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2203      	movs	r2, #3
 800141a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2201      	movs	r2, #1
 8001420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	187a      	adds	r2, r7, r1
 8001424:	2390      	movs	r3, #144	; 0x90
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	0011      	movs	r1, r2
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f98a 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b00b      	add	sp, #44	; 0x2c
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 f87a 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800147c:	f7ff fff7 	bl	800146e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	; (80014c4 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014a6:	f001 fb2f 	bl	8002b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fe5f 	bl	800116c <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   r0, =_estack
 80014b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014b4:	20000180 	.word	0x20000180
  ldr r1, =_edata
 80014b8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80014bc:	08002bb8 	.word	0x08002bb8
  ldr r2, =_sbss
 80014c0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80014c4:	20000234 	.word	0x20000234

080014c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_IRQHandler>
	...

080014cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_Init+0x24>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_Init+0x24>)
 80014d6:	2110      	movs	r1, #16
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f809 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff ff3d 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_InitTick+0x5c>)
 80014fe:	681c      	ldr	r4, [r3, #0]
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	0019      	movs	r1, r3
 8001506:	23fa      	movs	r3, #250	; 0xfa
 8001508:	0098      	lsls	r0, r3, #2
 800150a:	f7ff fda3 	bl	8001054 <__udivsi3>
 800150e:	0003      	movs	r3, r0
 8001510:	0019      	movs	r1, r3
 8001512:	0020      	movs	r0, r4
 8001514:	f7ff fd9e 	bl	8001054 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f905 	bl	800172a <HAL_SYSTICK_Config>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e00f      	b.n	8001548 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d80b      	bhi.n	8001546 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2301      	movs	r3, #1
 8001532:	425b      	negs	r3, r3
 8001534:	2200      	movs	r2, #0
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f8e2 	bl	8001700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_InitTick+0x64>)
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b003      	add	sp, #12
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	20000180 	.word	0x20000180
 8001554:	20000188 	.word	0x20000188
 8001558:	20000184 	.word	0x20000184

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	18d2      	adds	r2, r2, r3
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	20000188 	.word	0x20000188
 800157c:	20000230 	.word	0x20000230

08001580 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	20000230 	.word	0x20000230

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fff0 	bl	8001580 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	001a      	movs	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	f7ff ffe0 	bl	8001580 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000188 	.word	0x20000188

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	0002      	movs	r2, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b7f      	cmp	r3, #127	; 0x7f
 80015f0:	d828      	bhi.n	8001644 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f2:	4a2f      	ldr	r2, [pc, #188]	; (80016b0 <__NVIC_SetPriority+0xd4>)
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	33c0      	adds	r3, #192	; 0xc0
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	589b      	ldr	r3, [r3, r2]
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	0011      	movs	r1, r2
 8001608:	2203      	movs	r2, #3
 800160a:	400a      	ands	r2, r1
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	21ff      	movs	r1, #255	; 0xff
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	401a      	ands	r2, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	2303      	movs	r3, #3
 800162a:	4003      	ands	r3, r0
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	481f      	ldr	r0, [pc, #124]	; (80016b0 <__NVIC_SetPriority+0xd4>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b25b      	sxtb	r3, r3
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	430a      	orrs	r2, r1
 800163c:	33c0      	adds	r3, #192	; 0xc0
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001642:	e031      	b.n	80016a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <__NVIC_SetPriority+0xd8>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0019      	movs	r1, r3
 800164c:	230f      	movs	r3, #15
 800164e:	400b      	ands	r3, r1
 8001650:	3b08      	subs	r3, #8
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3306      	adds	r3, #6
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	3304      	adds	r3, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	0011      	movs	r1, r2
 8001664:	2203      	movs	r2, #3
 8001666:	400a      	ands	r2, r1
 8001668:	00d2      	lsls	r2, r2, #3
 800166a:	21ff      	movs	r1, #255	; 0xff
 800166c:	4091      	lsls	r1, r2
 800166e:	000a      	movs	r2, r1
 8001670:	43d2      	mvns	r2, r2
 8001672:	401a      	ands	r2, r3
 8001674:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	22ff      	movs	r2, #255	; 0xff
 800167c:	401a      	ands	r2, r3
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	0018      	movs	r0, r3
 8001684:	2303      	movs	r3, #3
 8001686:	4003      	ands	r3, r0
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <__NVIC_SetPriority+0xd8>)
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	001c      	movs	r4, r3
 8001694:	230f      	movs	r3, #15
 8001696:	4023      	ands	r3, r4
 8001698:	3b08      	subs	r3, #8
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	430a      	orrs	r2, r1
 800169e:	3306      	adds	r3, #6
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	18c3      	adds	r3, r0, r3
 80016a4:	3304      	adds	r3, #4
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b003      	add	sp, #12
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	045b      	lsls	r3, r3, #17
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d301      	bcc.n	80016d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016cc:	2301      	movs	r3, #1
 80016ce:	e010      	b.n	80016f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <SysTick_Config+0x44>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	3a01      	subs	r2, #1
 80016d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d8:	2301      	movs	r3, #1
 80016da:	425b      	negs	r3, r3
 80016dc:	2103      	movs	r1, #3
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff ff7c 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x44>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x44>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	210f      	movs	r1, #15
 800170c:	187b      	adds	r3, r7, r1
 800170e:	1c02      	adds	r2, r0, #0
 8001710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ffbf 	bl	80016b8 <SysTick_Config>
 800173a:	0003      	movs	r3, r0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e14f      	b.n	80019f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d100      	bne.n	800176c <HAL_GPIO_Init+0x28>
 800176a:	e140      	b.n	80019ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	4013      	ands	r3, r2
 8001774:	2b01      	cmp	r3, #1
 8001776:	d005      	beq.n	8001784 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001780:	2b02      	cmp	r3, #2
 8001782:	d130      	bne.n	80017e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ba:	2201      	movs	r2, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	2201      	movs	r2, #1
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d017      	beq.n	8001822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	4013      	ands	r3, r2
 800182a:	2b02      	cmp	r3, #2
 800182c:	d123      	bne.n	8001876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	08da      	lsrs	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3208      	adds	r2, #8
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	58d3      	ldr	r3, [r2, r3]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	43da      	mvns	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2107      	movs	r1, #7
 800185a:	400b      	ands	r3, r1
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	6939      	ldr	r1, [r7, #16]
 8001874:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	401a      	ands	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	4013      	ands	r3, r2
 80018b4:	d100      	bne.n	80018b8 <HAL_GPIO_Init+0x174>
 80018b6:	e09a      	b.n	80019ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b8:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_GPIO_Init+0x2c8>)
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_GPIO_Init+0x2c8>)
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_GPIO_Init+0x2c8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d0:	4a4f      	ldr	r2, [pc, #316]	; (8001a10 <HAL_GPIO_Init+0x2cc>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	589b      	ldr	r3, [r3, r2]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	2390      	movs	r3, #144	; 0x90
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x1e2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a44      	ldr	r2, [pc, #272]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x1de>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a43      	ldr	r2, [pc, #268]	; (8001a18 <HAL_GPIO_Init+0x2d4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x1da>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a42      	ldr	r2, [pc, #264]	; (8001a1c <HAL_GPIO_Init+0x2d8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x1d6>
 8001916:	2303      	movs	r3, #3
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x1e4>
 800191a:	2305      	movs	r3, #5
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x1e4>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x1e4>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x1e4>
 8001926:	2300      	movs	r3, #0
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	2103      	movs	r1, #3
 800192c:	400a      	ands	r2, r1
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x2cc>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43da      	mvns	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	035b      	lsls	r3, r3, #13
 800195e:	4013      	ands	r3, r2
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43da      	mvns	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	039b      	lsls	r3, r3, #14
 8001988:	4013      	ands	r3, r2
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	4013      	ands	r3, r2
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43da      	mvns	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	025b      	lsls	r3, r3, #9
 80019dc:	4013      	ands	r3, r2
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	40da      	lsrs	r2, r3
 80019fc:	1e13      	subs	r3, r2, #0
 80019fe:	d000      	beq.n	8001a02 <HAL_GPIO_Init+0x2be>
 8001a00:	e6a8      	b.n	8001754 <HAL_GPIO_Init+0x10>
  } 
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b006      	add	sp, #24
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	48000400 	.word	0x48000400
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	48000c00 	.word	0x48000c00
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	0008      	movs	r0, r1
 8001a2e:	0011      	movs	r1, r2
 8001a30:	1cbb      	adds	r3, r7, #2
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	1c7b      	adds	r3, r7, #1
 8001a38:	1c0a      	adds	r2, r1, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3c:	1c7b      	adds	r3, r7, #1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a44:	1cbb      	adds	r3, r7, #2
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a4e:	1cbb      	adds	r3, r7, #2
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	000a      	movs	r2, r1
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a72:	1cbb      	adds	r3, r7, #2
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	1cb9      	adds	r1, r7, #2
 8001a82:	8809      	ldrh	r1, [r1, #0]
 8001a84:	400b      	ands	r3, r1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e305      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x1e>
 8001ab0:	e08d      	b.n	8001bce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ab2:	4bc5      	ldr	r3, [pc, #788]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d00e      	beq.n	8001adc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001abe:	4bc2      	ldr	r3, [pc, #776]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x64>
 8001aca:	4bbf      	ldr	r3, [pc, #764]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	23c0      	movs	r3, #192	; 0xc0
 8001ad0:	025b      	lsls	r3, r3, #9
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10d      	bne.n	8001af8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	4bba      	ldr	r3, [pc, #744]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d100      	bne.n	8001aea <HAL_RCC_OscConfig+0x56>
 8001ae8:	e070      	b.n	8001bcc <HAL_RCC_OscConfig+0x138>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d000      	beq.n	8001af4 <HAL_RCC_OscConfig+0x60>
 8001af2:	e06b      	b.n	8001bcc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e2dc      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x7c>
 8001b00:	4bb1      	ldr	r3, [pc, #708]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4bb0      	ldr	r3, [pc, #704]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0249      	lsls	r1, r1, #9
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e02f      	b.n	8001b70 <HAL_RCC_OscConfig+0xdc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x9e>
 8001b18:	4bab      	ldr	r3, [pc, #684]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4baa      	ldr	r3, [pc, #680]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b1e:	49ab      	ldr	r1, [pc, #684]	; (8001dcc <HAL_RCC_OscConfig+0x338>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4ba8      	ldr	r3, [pc, #672]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4ba7      	ldr	r3, [pc, #668]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b2a:	49a9      	ldr	r1, [pc, #676]	; (8001dd0 <HAL_RCC_OscConfig+0x33c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e01e      	b.n	8001b70 <HAL_RCC_OscConfig+0xdc>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d10e      	bne.n	8001b58 <HAL_RCC_OscConfig+0xc4>
 8001b3a:	4ba3      	ldr	r3, [pc, #652]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4ba2      	ldr	r3, [pc, #648]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	02c9      	lsls	r1, r1, #11
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4b9f      	ldr	r3, [pc, #636]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	0249      	lsls	r1, r1, #9
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xdc>
 8001b58:	4b9b      	ldr	r3, [pc, #620]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b9a      	ldr	r3, [pc, #616]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b5e:	499b      	ldr	r1, [pc, #620]	; (8001dcc <HAL_RCC_OscConfig+0x338>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	4b98      	ldr	r3, [pc, #608]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b97      	ldr	r3, [pc, #604]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b6a:	4999      	ldr	r1, [pc, #612]	; (8001dd0 <HAL_RCC_OscConfig+0x33c>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d014      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fd02 	bl	8001580 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b82:	f7ff fcfd 	bl	8001580 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	; 0x64
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e28e      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0xee>
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fced 	bl	8001580 <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fce8 	bl	8001580 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e279      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x118>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x146>
 8001bd8:	e06c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	220c      	movs	r2, #12
 8001be0:	4013      	ands	r3, r2
 8001be2:	d00e      	beq.n	8001c02 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001be4:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	220c      	movs	r2, #12
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d11f      	bne.n	8001c30 <HAL_RCC_OscConfig+0x19c>
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	23c0      	movs	r3, #192	; 0xc0
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_OscConfig+0x184>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e24c      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	22f8      	movs	r2, #248	; 0xf8
 8001c1e:	4393      	bics	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00da      	lsls	r2, r3, #3
 8001c28:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e041      	b.n	8001cb4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d024      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fc9c 	bl	8001580 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fc97 	bl	8001580 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e228      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f1      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	22f8      	movs	r2, #248	; 0xf8
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	00da      	lsls	r2, r3, #3
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e018      	b.n	8001cb4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fc77 	bl	8001580 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fc72 	bl	8001580 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e203      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d1f1      	bne.n	8001c98 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d036      	beq.n	8001d2c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fc55 	bl	8001580 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc50 	bl	8001580 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1e1      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d0f1      	beq.n	8001cdc <HAL_RCC_OscConfig+0x248>
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	438a      	bics	r2, r1
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fc3b 	bl	8001580 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc36 	bl	8001580 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1c7      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2202      	movs	r2, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d1f1      	bne.n	8001d10 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d100      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2a4>
 8001d36:	e0b5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d38:	201f      	movs	r0, #31
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d110      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0549      	lsls	r1, r1, #21
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	4013      	ands	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d68:	183b      	adds	r3, r7, r0
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_OscConfig+0x340>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	d11a      	bne.n	8001db0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_RCC_OscConfig+0x340>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_OscConfig+0x340>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0049      	lsls	r1, r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d88:	f7ff fbfa 	bl	8001580 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7ff fbf5 	bl	8001580 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	; 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e186      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x340>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10f      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x344>
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	4b02      	ldr	r3, [pc, #8]	; (8001dc8 <HAL_RCC_OscConfig+0x334>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	621a      	str	r2, [r3, #32]
 8001dc4:	e036      	b.n	8001e34 <HAL_RCC_OscConfig+0x3a0>
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	fffeffff 	.word	0xfffeffff
 8001dd0:	fffbffff 	.word	0xfffbffff
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x366>
 8001de0:	4bb6      	ldr	r3, [pc, #728]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	4bb5      	ldr	r3, [pc, #724]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	438a      	bics	r2, r1
 8001dea:	621a      	str	r2, [r3, #32]
 8001dec:	4bb3      	ldr	r3, [pc, #716]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	4bb2      	ldr	r3, [pc, #712]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001df2:	2104      	movs	r1, #4
 8001df4:	438a      	bics	r2, r1
 8001df6:	621a      	str	r2, [r3, #32]
 8001df8:	e01c      	b.n	8001e34 <HAL_RCC_OscConfig+0x3a0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x388>
 8001e02:	4bae      	ldr	r3, [pc, #696]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	4bad      	ldr	r3, [pc, #692]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e08:	2104      	movs	r1, #4
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	621a      	str	r2, [r3, #32]
 8001e0e:	4bab      	ldr	r3, [pc, #684]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	4baa      	ldr	r3, [pc, #680]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	430a      	orrs	r2, r1
 8001e18:	621a      	str	r2, [r3, #32]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0x3a0>
 8001e1c:	4ba7      	ldr	r3, [pc, #668]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	4ba6      	ldr	r3, [pc, #664]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	438a      	bics	r2, r1
 8001e26:	621a      	str	r2, [r3, #32]
 8001e28:	4ba4      	ldr	r3, [pc, #656]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e2e:	2104      	movs	r1, #4
 8001e30:	438a      	bics	r2, r1
 8001e32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d014      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fba0 	bl	8001580 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff fb9b 	bl	8001580 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a9b      	ldr	r2, [pc, #620]	; (80020c0 <HAL_RCC_OscConfig+0x62c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e12b      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	4b98      	ldr	r3, [pc, #608]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3b2>
 8001e64:	e013      	b.n	8001e8e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb8b 	bl	8001580 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	e009      	b.n	8001e84 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff fb86 	bl	8001580 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	4a91      	ldr	r2, [pc, #580]	; (80020c0 <HAL_RCC_OscConfig+0x62c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e116      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e8e:	231f      	movs	r3, #31
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	4b87      	ldr	r3, [pc, #540]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001e9e:	4989      	ldr	r1, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x630>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d063      	beq.n	8001f76 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d12a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eb6:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eba:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ec2:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec6:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb57 	bl	8001580 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ed8:	f7ff fb52 	bl	8001580 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0e3      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eea:	4b74      	ldr	r3, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f1      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ef4:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	22f8      	movs	r2, #248	; 0xf8
 8001efa:	4393      	bics	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	00da      	lsls	r2, r3, #3
 8001f04:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0a:	e034      	b.n	8001f76 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	3305      	adds	r3, #5
 8001f12:	d111      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f14:	4b69      	ldr	r3, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f24:	22f8      	movs	r2, #248	; 0xf8
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	00da      	lsls	r2, r3, #3
 8001f30:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	e01e      	b.n	8001f76 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f38:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3c:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f3e:	2104      	movs	r1, #4
 8001f40:	430a      	orrs	r2, r1
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f48:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fb16 	bl	8001580 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f5a:	f7ff fb11 	bl	8001580 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0a2      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	2202      	movs	r2, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f1      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d100      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4ec>
 8001f7e:	e097      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	220c      	movs	r2, #12
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d100      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4fa>
 8001f8c:	e06b      	b.n	8002066 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d14c      	bne.n	8002030 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001f9c:	494a      	ldr	r1, [pc, #296]	; (80020c8 <HAL_RCC_OscConfig+0x634>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff faed 	bl	8001580 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff fae8 	bl	8001580 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e079      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	049b      	lsls	r3, r3, #18
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	220f      	movs	r2, #15
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_RCC_OscConfig+0x638>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0449      	lsls	r1, r1, #17
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fabb 	bl	8001580 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fab6 	bl	8001580 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e047      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	049b      	lsls	r3, r3, #18
 800202a:	4013      	ands	r3, r2
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x57c>
 800202e:	e03f      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8002036:	4924      	ldr	r1, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x634>)
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff faa0 	bl	8001580 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff fa9b 	bl	8001580 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e02c      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	049b      	lsls	r3, r3, #18
 8002060:	4013      	ands	r3, r2
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x5b2>
 8002064:	e024      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01f      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x628>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	23c0      	movs	r3, #192	; 0xc0
 8002082:	025b      	lsls	r3, r3, #9
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	429a      	cmp	r2, r3
 800208c:	d10e      	bne.n	80020ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	220f      	movs	r2, #15
 8002092:	401a      	ands	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	23f0      	movs	r3, #240	; 0xf0
 80020a0:	039b      	lsls	r3, r3, #14
 80020a2:	401a      	ands	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b008      	add	sp, #32
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	00001388 	.word	0x00001388
 80020c4:	efffffff 	.word	0xefffffff
 80020c8:	feffffff 	.word	0xfeffffff
 80020cc:	ffc27fff 	.word	0xffc27fff

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b3      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d911      	bls.n	8002116 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b58      	ldr	r3, [pc, #352]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	4b55      	ldr	r3, [pc, #340]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e09a      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d015      	beq.n	800214c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2204      	movs	r2, #4
 8002126:	4013      	ands	r3, r2
 8002128:	d006      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800212a:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002130:	21e0      	movs	r1, #224	; 0xe0
 8002132:	00c9      	lsls	r1, r1, #3
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	22f0      	movs	r2, #240	; 0xf0
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	4b44      	ldr	r3, [pc, #272]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	4013      	ands	r3, r2
 8002168:	d114      	bne.n	8002194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06e      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	049b      	lsls	r3, r3, #18
 800217e:	4013      	ands	r3, r2
 8002180:	d108      	bne.n	8002194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e062      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e05b      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff f9ea 	bl	8001580 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b0:	e009      	b.n	80021c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b2:	f7ff f9e5 	bl	8001580 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_RCC_ClockConfig+0x18c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e042      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	220c      	movs	r2, #12
 80021cc:	401a      	ands	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1ec      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d211      	bcs.n	800220a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	4393      	bics	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_RCC_ClockConfig+0x184>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e020      	b.n	800224c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_RCC_ClockConfig+0x190>)
 800221a:	4013      	ands	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002228:	f000 f820 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222c:	0001      	movs	r1, r0
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x188>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	220f      	movs	r2, #15
 8002236:	4013      	ands	r3, r2
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x194>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	000a      	movs	r2, r1
 800223e:	40da      	lsrs	r2, r3
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x198>)
 8002242:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff f955 	bl	80014f4 <HAL_InitTick>
  
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	00001388 	.word	0x00001388
 8002260:	fffff8ff 	.word	0xfffff8ff
 8002264:	08002b78 	.word	0x08002b78
 8002268:	20000180 	.word	0x20000180

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	220c      	movs	r2, #12
 8002290:	4013      	ands	r3, r2
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
 8002296:	2b08      	cmp	r3, #8
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x36>
 800229a:	e02e      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 800229e:	613b      	str	r3, [r7, #16]
      break;
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	220f      	movs	r2, #15
 80022a8:	4013      	ands	r3, r2
 80022aa:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	220f      	movs	r2, #15
 80022b6:	4013      	ands	r3, r2
 80022b8:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_RCC_GetSysClockFreq+0xac>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	401a      	ands	r2, r3
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	480f      	ldr	r0, [pc, #60]	; (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022d2:	f7fe febf 	bl	8001054 <__udivsi3>
 80022d6:	0003      	movs	r3, r0
 80022d8:	001a      	movs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4353      	muls	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e6:	f7fe feb5 	bl	8001054 <__udivsi3>
 80022ea:	0003      	movs	r3, r0
 80022ec:	001a      	movs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4353      	muls	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	e002      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022fc:	613b      	str	r3, [r7, #16]
      break;
 80022fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002300:	693b      	ldr	r3, [r7, #16]
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b006      	add	sp, #24
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40021000 	.word	0x40021000
 8002310:	007a1200 	.word	0x007a1200
 8002314:	08002b90 	.word	0x08002b90
 8002318:	08002ba0 	.word	0x08002ba0

0800231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	20000180 	.word	0x20000180

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	0001      	movs	r1, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	2207      	movs	r2, #7
 8002342:	4013      	ands	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	40d9      	lsrs	r1, r3
 800234a:	000b      	movs	r3, r1
}    
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	40021000 	.word	0x40021000
 8002358:	08002b88 	.word	0x08002b88

0800235c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e044      	b.n	80023f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2278      	movs	r2, #120	; 0x78
 800237a:	2100      	movs	r1, #0
 800237c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff f811 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	; 0x24
 800238a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	438a      	bics	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 f830 	bl	8002404 <UART_SetConfig>
 80023a4:	0003      	movs	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e024      	b.n	80023f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f97b 	bl	80026b4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	490d      	ldr	r1, [pc, #52]	; (8002400 <HAL_UART_Init+0xa4>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2108      	movs	r1, #8
 80023da:	438a      	bics	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fa13 	bl	800281c <UART_CheckIdleState>
 80023f6:	0003      	movs	r3, r0
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	fffff7ff 	.word	0xfffff7ff

08002404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800240c:	231e      	movs	r3, #30
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a97      	ldr	r2, [pc, #604]	; (8002690 <UART_SetConfig+0x28c>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a92      	ldr	r2, [pc, #584]	; (8002694 <UART_SetConfig+0x290>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a89      	ldr	r2, [pc, #548]	; (8002698 <UART_SetConfig+0x294>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a85      	ldr	r2, [pc, #532]	; (800269c <UART_SetConfig+0x298>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d127      	bne.n	80024da <UART_SetConfig+0xd6>
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <UART_SetConfig+0x29c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2203      	movs	r2, #3
 8002490:	4013      	ands	r3, r2
 8002492:	2b03      	cmp	r3, #3
 8002494:	d00d      	beq.n	80024b2 <UART_SetConfig+0xae>
 8002496:	d81b      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d014      	beq.n	80024c6 <UART_SetConfig+0xc2>
 800249c:	d818      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <UART_SetConfig+0xa4>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d00a      	beq.n	80024bc <UART_SetConfig+0xb8>
 80024a6:	e013      	b.n	80024d0 <UART_SetConfig+0xcc>
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e035      	b.n	800251e <UART_SetConfig+0x11a>
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e030      	b.n	800251e <UART_SetConfig+0x11a>
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e02b      	b.n	800251e <UART_SetConfig+0x11a>
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2208      	movs	r2, #8
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e026      	b.n	800251e <UART_SetConfig+0x11a>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2210      	movs	r2, #16
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e021      	b.n	800251e <UART_SetConfig+0x11a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a71      	ldr	r2, [pc, #452]	; (80026a4 <UART_SetConfig+0x2a0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d104      	bne.n	80024ee <UART_SetConfig+0xea>
 80024e4:	231f      	movs	r3, #31
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e017      	b.n	800251e <UART_SetConfig+0x11a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <UART_SetConfig+0x2a4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d104      	bne.n	8002502 <UART_SetConfig+0xfe>
 80024f8:	231f      	movs	r3, #31
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e00d      	b.n	800251e <UART_SetConfig+0x11a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a69      	ldr	r2, [pc, #420]	; (80026ac <UART_SetConfig+0x2a8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d104      	bne.n	8002516 <UART_SetConfig+0x112>
 800250c:	231f      	movs	r3, #31
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e003      	b.n	800251e <UART_SetConfig+0x11a>
 8002516:	231f      	movs	r3, #31
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2210      	movs	r2, #16
 800251c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	429a      	cmp	r2, r3
 8002528:	d15c      	bne.n	80025e4 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 800252a:	231f      	movs	r3, #31
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d015      	beq.n	8002560 <UART_SetConfig+0x15c>
 8002534:	dc18      	bgt.n	8002568 <UART_SetConfig+0x164>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00d      	beq.n	8002556 <UART_SetConfig+0x152>
 800253a:	dc15      	bgt.n	8002568 <UART_SetConfig+0x164>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <UART_SetConfig+0x142>
 8002540:	2b02      	cmp	r3, #2
 8002542:	d005      	beq.n	8002550 <UART_SetConfig+0x14c>
 8002544:	e010      	b.n	8002568 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002546:	f7ff fef3 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 800254a:	0003      	movs	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]
        break;
 800254e:	e012      	b.n	8002576 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <UART_SetConfig+0x2ac>)
 8002552:	61bb      	str	r3, [r7, #24]
        break;
 8002554:	e00f      	b.n	8002576 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002556:	f7ff fe89 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800255a:	0003      	movs	r3, r0
 800255c:	61bb      	str	r3, [r7, #24]
        break;
 800255e:	e00a      	b.n	8002576 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	61bb      	str	r3, [r7, #24]
        break;
 8002566:	e006      	b.n	8002576 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800256c:	231e      	movs	r3, #30
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
        break;
 8002574:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d100      	bne.n	800257e <UART_SetConfig+0x17a>
 800257c:	e07a      	b.n	8002674 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	005a      	lsls	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	18d2      	adds	r2, r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0019      	movs	r1, r3
 8002590:	0010      	movs	r0, r2
 8002592:	f7fe fd5f 	bl	8001054 <__udivsi3>
 8002596:	0003      	movs	r3, r0
 8002598:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d91c      	bls.n	80025da <UART_SetConfig+0x1d6>
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d217      	bcs.n	80025da <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	200e      	movs	r0, #14
 80025b0:	183b      	adds	r3, r7, r0
 80025b2:	210f      	movs	r1, #15
 80025b4:	438a      	bics	r2, r1
 80025b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2207      	movs	r2, #7
 80025c0:	4013      	ands	r3, r2
 80025c2:	b299      	uxth	r1, r3
 80025c4:	183b      	adds	r3, r7, r0
 80025c6:	183a      	adds	r2, r7, r0
 80025c8:	8812      	ldrh	r2, [r2, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	183a      	adds	r2, r7, r0
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	e04c      	b.n	8002674 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80025da:	231e      	movs	r3, #30
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e047      	b.n	8002674 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d015      	beq.n	800261a <UART_SetConfig+0x216>
 80025ee:	dc18      	bgt.n	8002622 <UART_SetConfig+0x21e>
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d00d      	beq.n	8002610 <UART_SetConfig+0x20c>
 80025f4:	dc15      	bgt.n	8002622 <UART_SetConfig+0x21e>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <UART_SetConfig+0x1fc>
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d005      	beq.n	800260a <UART_SetConfig+0x206>
 80025fe:	e010      	b.n	8002622 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002600:	f7ff fe96 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002604:	0003      	movs	r3, r0
 8002606:	61bb      	str	r3, [r7, #24]
        break;
 8002608:	e012      	b.n	8002630 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <UART_SetConfig+0x2ac>)
 800260c:	61bb      	str	r3, [r7, #24]
        break;
 800260e:	e00f      	b.n	8002630 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002610:	f7ff fe2c 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002614:	0003      	movs	r3, r0
 8002616:	61bb      	str	r3, [r7, #24]
        break;
 8002618:	e00a      	b.n	8002630 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	61bb      	str	r3, [r7, #24]
        break;
 8002620:	e006      	b.n	8002630 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002626:	231e      	movs	r3, #30
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
        break;
 800262e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01e      	beq.n	8002674 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	085a      	lsrs	r2, r3, #1
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	18d2      	adds	r2, r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0019      	movs	r1, r3
 8002646:	0010      	movs	r0, r2
 8002648:	f7fe fd04 	bl	8001054 <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d90a      	bls.n	800266c <UART_SetConfig+0x268>
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	429a      	cmp	r2, r3
 800265e:	d205      	bcs.n	800266c <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	e003      	b.n	8002674 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 800266c:	231e      	movs	r3, #30
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002680:	231e      	movs	r3, #30
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	781b      	ldrb	r3, [r3, #0]
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b008      	add	sp, #32
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	efff69f3 	.word	0xefff69f3
 8002694:	ffffcfff 	.word	0xffffcfff
 8002698:	fffff4ff 	.word	0xfffff4ff
 800269c:	40013800 	.word	0x40013800
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40004400 	.word	0x40004400
 80026a8:	40004800 	.word	0x40004800
 80026ac:	40004c00 	.word	0x40004c00
 80026b0:	007a1200 	.word	0x007a1200

080026b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00b      	beq.n	80026de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a4a      	ldr	r2, [pc, #296]	; (80027f8 <UART_AdvFeatureConfig+0x144>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a43      	ldr	r2, [pc, #268]	; (80027fc <UART_AdvFeatureConfig+0x148>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2204      	movs	r2, #4
 8002706:	4013      	ands	r3, r2
 8002708:	d00b      	beq.n	8002722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <UART_AdvFeatureConfig+0x14c>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2208      	movs	r2, #8
 8002728:	4013      	ands	r3, r2
 800272a:	d00b      	beq.n	8002744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a34      	ldr	r2, [pc, #208]	; (8002804 <UART_AdvFeatureConfig+0x150>)
 8002734:	4013      	ands	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2210      	movs	r2, #16
 800274a:	4013      	ands	r3, r2
 800274c:	d00b      	beq.n	8002766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <UART_AdvFeatureConfig+0x154>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2220      	movs	r2, #32
 800276c:	4013      	ands	r3, r2
 800276e:	d00b      	beq.n	8002788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <UART_AdvFeatureConfig+0x158>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	4013      	ands	r3, r2
 8002790:	d01d      	beq.n	80027ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <UART_AdvFeatureConfig+0x15c>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	035b      	lsls	r3, r3, #13
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10b      	bne.n	80027ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a15      	ldr	r2, [pc, #84]	; (8002814 <UART_AdvFeatureConfig+0x160>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00b      	beq.n	80027f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <UART_AdvFeatureConfig+0x164>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	fffdffff 	.word	0xfffdffff
 80027fc:	fffeffff 	.word	0xfffeffff
 8002800:	fffbffff 	.word	0xfffbffff
 8002804:	ffff7fff 	.word	0xffff7fff
 8002808:	ffffefff 	.word	0xffffefff
 800280c:	ffffdfff 	.word	0xffffdfff
 8002810:	ffefffff 	.word	0xffefffff
 8002814:	ff9fffff 	.word	0xff9fffff
 8002818:	fff7ffff 	.word	0xfff7ffff

0800281c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b092      	sub	sp, #72	; 0x48
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2284      	movs	r2, #132	; 0x84
 8002828:	2100      	movs	r1, #0
 800282a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800282c:	f7fe fea8 	bl	8001580 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2208      	movs	r2, #8
 800283c:	4013      	ands	r3, r2
 800283e:	2b08      	cmp	r3, #8
 8002840:	d12c      	bne.n	800289c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0391      	lsls	r1, r2, #14
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4a46      	ldr	r2, [pc, #280]	; (8002964 <UART_CheckIdleState+0x148>)
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	f000 f88c 	bl	800296c <UART_WaitOnFlagUntilTimeout>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d021      	beq.n	800289c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002858:	f3ef 8310 	mrs	r3, PRIMASK
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002860:	63bb      	str	r3, [r7, #56]	; 0x38
 8002862:	2301      	movs	r3, #1
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	f383 8810 	msr	PRIMASK, r3
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	438a      	bics	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	f383 8810 	msr	PRIMASK, r3
}
 8002888:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2278      	movs	r2, #120	; 0x78
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e05f      	b.n	800295c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2204      	movs	r2, #4
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d146      	bne.n	8002938 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	03d1      	lsls	r1, r2, #15
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <UART_CheckIdleState+0x148>)
 80028b4:	9200      	str	r2, [sp, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f000 f858 	bl	800296c <UART_WaitOnFlagUntilTimeout>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d03b      	beq.n	8002938 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80028c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ca:	2301      	movs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4921      	ldr	r1, [pc, #132]	; (8002968 <UART_CheckIdleState+0x14c>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f2:	f3ef 8310 	mrs	r3, PRIMASK
 80028f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80028f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
 80028fc:	2301      	movs	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	2120      	movs	r1, #32
 800292a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2278      	movs	r2, #120	; 0x78
 8002930:	2100      	movs	r1, #0
 8002932:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e011      	b.n	800295c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	2120      	movs	r1, #32
 8002944:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2278      	movs	r2, #120	; 0x78
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b010      	add	sp, #64	; 0x40
 8002962:	bd80      	pop	{r7, pc}
 8002964:	01ffffff 	.word	0x01ffffff
 8002968:	fffffedf 	.word	0xfffffedf

0800296c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297c:	e04b      	b.n	8002a16 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	3301      	adds	r3, #1
 8002982:	d048      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002984:	f7fe fdfc 	bl	8001580 <HAL_GetTick>
 8002988:	0002      	movs	r2, r0
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e04b      	b.n	8002a36 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d035      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2208      	movs	r2, #8
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d111      	bne.n	80029dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2208      	movs	r2, #8
 80029be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f83c 	bl	8002a40 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2284      	movs	r2, #132	; 0x84
 80029cc:	2108      	movs	r1, #8
 80029ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2278      	movs	r2, #120	; 0x78
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e02c      	b.n	8002a36 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	401a      	ands	r2, r3
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d112      	bne.n	8002a16 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f81f 	bl	8002a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2284      	movs	r2, #132	; 0x84
 8002a06:	2120      	movs	r1, #32
 8002a08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2278      	movs	r2, #120	; 0x78
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e00f      	b.n	8002a36 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	425a      	negs	r2, r3
 8002a26:	4153      	adcs	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d0a4      	beq.n	800297e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b004      	add	sp, #16
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a48:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002a4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f383 8810 	msr	PRIMASK, r3
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4926      	ldr	r1, [pc, #152]	; (8002b04 <UART_EndRxTransfer+0xc4>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7e:	623b      	str	r3, [r7, #32]
  return(result);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
 8002a84:	2301      	movs	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f383 8810 	msr	PRIMASK, r3
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	f383 8810 	msr	PRIMASK, r3
}
 8002aaa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d118      	bne.n	8002ae6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	2301      	movs	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f383 8810 	msr	PRIMASK, r3
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2110      	movs	r1, #16
 8002ad6:	438a      	bics	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f383 8810 	msr	PRIMASK, r3
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	2120      	movs	r1, #32
 8002aec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b00e      	add	sp, #56	; 0x38
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	fffffedf 	.word	0xfffffedf

08002b08 <__libc_init_array>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	4d0c      	ldr	r5, [pc, #48]	; (8002b40 <__libc_init_array+0x38>)
 8002b0e:	4c0d      	ldr	r4, [pc, #52]	; (8002b44 <__libc_init_array+0x3c>)
 8002b10:	1b64      	subs	r4, r4, r5
 8002b12:	10a4      	asrs	r4, r4, #2
 8002b14:	42a6      	cmp	r6, r4
 8002b16:	d109      	bne.n	8002b2c <__libc_init_array+0x24>
 8002b18:	2600      	movs	r6, #0
 8002b1a:	f000 f821 	bl	8002b60 <_init>
 8002b1e:	4d0a      	ldr	r5, [pc, #40]	; (8002b48 <__libc_init_array+0x40>)
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <__libc_init_array+0x44>)
 8002b22:	1b64      	subs	r4, r4, r5
 8002b24:	10a4      	asrs	r4, r4, #2
 8002b26:	42a6      	cmp	r6, r4
 8002b28:	d105      	bne.n	8002b36 <__libc_init_array+0x2e>
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	00b3      	lsls	r3, r6, #2
 8002b2e:	58eb      	ldr	r3, [r5, r3]
 8002b30:	4798      	blx	r3
 8002b32:	3601      	adds	r6, #1
 8002b34:	e7ee      	b.n	8002b14 <__libc_init_array+0xc>
 8002b36:	00b3      	lsls	r3, r6, #2
 8002b38:	58eb      	ldr	r3, [r5, r3]
 8002b3a:	4798      	blx	r3
 8002b3c:	3601      	adds	r6, #1
 8002b3e:	e7f2      	b.n	8002b26 <__libc_init_array+0x1e>
 8002b40:	08002bb0 	.word	0x08002bb0
 8002b44:	08002bb0 	.word	0x08002bb0
 8002b48:	08002bb0 	.word	0x08002bb0
 8002b4c:	08002bb4 	.word	0x08002bb4

08002b50 <memset>:
 8002b50:	0003      	movs	r3, r0
 8002b52:	1882      	adds	r2, r0, r2
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d100      	bne.n	8002b5a <memset+0xa>
 8002b58:	4770      	bx	lr
 8002b5a:	7019      	strb	r1, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	e7f9      	b.n	8002b54 <memset+0x4>

08002b60 <_init>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr

08002b6c <_fini>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

Disassembly of section .mysection:

08018000 <Blink>:
void LOCATE_FUNC Blink(uint32_t dlyticks){
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8018008:	2390      	movs	r3, #144	; 0x90
 801800a:	05db      	lsls	r3, r3, #23
 801800c:	2120      	movs	r1, #32
 801800e:	0018      	movs	r0, r3
 8018010:	f7e9 fd25 	bl	8001a5e <HAL_GPIO_TogglePin>
	HAL_Delay(dlyticks);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	0018      	movs	r0, r3
 8018018:	f7e9 fabc 	bl	8001594 <HAL_Delay>
}
 801801c:	46c0      	nop			; (mov r8, r8)
 801801e:	46bd      	mov	sp, r7
 8018020:	b002      	add	sp, #8
 8018022:	bd80      	pop	{r7, pc}
